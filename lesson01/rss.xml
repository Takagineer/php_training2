<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	
	xmlns:georss="http://www.georss.org/georss"
	xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"
	>

<channel>
	<title>ともすた</title>
	<atom:link href="https://tomosta.jp/feed/" rel="self" type="application/rss+xml" />
	<link>https://tomosta.jp</link>
	<description>プログラミング学習コミュニティ</description>
	<lastBuildDate>Fri, 24 Mar 2023 02:29:38 +0000</lastBuildDate>
	<language>ja</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	

<image>
	<url>https://tomosta.jp/wp-content/uploads/2021/12/manabee_512-150x150.png</url>
	<title>ともすた</title>
	<link>https://tomosta.jp</link>
	<width>32</width>
	<height>32</height>
</image> 
<site xmlns="com-wordpress:feed-additions:1">207465929</site>	<item>
		<title>ChatGPTをプログラミング学習に役立てる方法5選</title>
		<link>https://tomosta.jp/2023/03/chatgpt_for_programming_learning/</link>
					<comments>https://tomosta.jp/2023/03/chatgpt_for_programming_learning/#respond</comments>
		
		<dc:creator><![CDATA[たにぐち　まこと]]></dc:creator>
		<pubDate>Fri, 24 Mar 2023 02:29:37 +0000</pubDate>
				<category><![CDATA[ブログ]]></category>
		<category><![CDATA[ChatGPT]]></category>
		<guid isPermaLink="false">https://tomosta.jp/?p=22918</guid>

					<description><![CDATA[高機能AIチャットサービス、ChatGPTはプログラミング学習にも役立てることができます。ここでは、5つの方法を紹介しましょう。]]></description>
										<content:encoded><![CDATA[
<figure class="wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio"><div class="wp-block-embed__wrapper">
<iframe title="ChatGPTをプログラミング学習に役立てる方法5選" width="500" height="281" src="https://www.youtube.com/embed/YY09ZILhKRM?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>
</div></figure>



<p>その登場から、一気にAI界の話題をさらっている『<a href="https://openai.com/blog/chatgpt" target="_blank" rel="noreferrer noopener">ChatGPT</a>』。まるで、人間と会話をしているようにAIと会話ができるとして、その賢さに驚愕している人が続出しています。</p>



<p>プログラミングでも、このChatGPTを役立てることができるのですが、どんな所に使ったら良いでしょう？　ここでは、プログラミング学習に役立てる方法5選を紹介しましょう。</p>



<h2>その前に注意。知識は古いです</h2>



<p>ChatGPTは、質問をするとそれに対して答えてくれるので、まるで本当にことかのように感じますが、実際には誤りも含まれているので気をつけて利用しましょう。例えばここでは、「HTMLの最新バージョンは？」と質問をしてみます。すると、「HTML5」であると回答されます。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-41-1024x576.png" alt="" class="wp-image-22922" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-41-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-41-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-41-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-41-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-41.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>しかし実は、HTMLは2021年に「HTML Living Standard」が最新とされていて、これは間違いです。なぜこんな簡単な質問も間違えてしまうのか。それは、ChatGPTが「正しいかどうか」を判断していないためです。</p>



<p>ChatGPTのベースとなっている「GPT（Generative Pre-trained Transformer）」という技術は、深層学習の1つで「大規模言語モデル」と呼ばれるものです。これは、「ある言葉の次にはどんな言葉がつながるか」という可能性を探るもので、つまりChatGPTは「次につながりそうな言葉」をつないでいるだけで、それが真実のことであるかは判断していません（現状では）。</p>



<p>そのため、間違えた回答も真実かのように回答してしまいます。このあたりは、注意して利用しなければなりません。</p>



<h2>1. プログラムの意味を聞く</h2>



<p>では、そんなChatGPTをどのように活用したら良いでしょう？　まず考えられるのは、プログラムコードの意味を教えてもらう方法です。</p>



<p>学習しているときに、意味が分からないプログラムコードが出てきたら、「次のJavaScriptのコードはどういう意味？」など、言語の種類とコードを書いて、プログラムコードを貼り付けましょう。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-42-1024x576.png" alt="" class="wp-image-22924" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-42-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-42-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-42-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-42-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-42.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>すると、そのコードの内容を解析して解説してくれます。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-43-1024x576.png" alt="" class="wp-image-22925" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-43-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-43-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-43-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-43-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-43.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>全体的な機能の説明から、各行の解説まで行ってくれるので、かなり理解しやすいでしょう。</p>



<h2>2. プログラムの改善を依頼する</h2>



<p>自分で作ってみたプログラムや、教材通りに作ったはずのプログラムが動作しない時や、「もう少しきれいに書けないかな？」というときに、「次のプログラムが動作しない原因と、改善点を教えて」などと投げかけてみましょう。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-44-1024x576.png" alt="" class="wp-image-22926" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-44-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-44-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-44-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-44-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-44.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>箇条書きで改善点などを列記してくれます。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-45-1024x576.png" alt="" class="wp-image-22928" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-45-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-45-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-45-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-45-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-45.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h2>3. プログラムを作ってもらう</h2>



<p>プログラムを1から作ってもらうこともできます。仕様を説明して、「というプログラムをJavaScriptで作成して」などと記述すると、ほぼそのまま動作するプログラムを制作してくれます。</p>



<pre class="wp-block-code"><code>次のようなプログラムをJavaScriptで作って

・1から10の数字からランダムで1つ数字を準備して、これを問題とする
・入力窓に「1から10の数字で、好きなものをいってください」と表示して入力を受け付ける
・入力された数字と問題があっていれば「正解」と表示する
・不正解の場合で、問題の数字が入力された数字よりも小さい場合は「もっと小さいです」と表示する。大きい場合は「もっと大きいです」と表示する
・正解するまで、入力欄を表示して繰り返す
・正解したらプログラムを終了する</code></pre>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-46-1024x576.png" alt="" class="wp-image-22930" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-46-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-46-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-46-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-46-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-46.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>ここで生成されたコードを確認しながら、構造を学ぶことができます。 </p>



<h2>4. 問題を出してもらう</h2>



<p>例えば、「while構文」について知ったら、ChatGPTに「while構文を使ったJavaScriptの問題を出して」とお願いしてみましょう。 </p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-47-1024x576.png" alt="" class="wp-image-22931" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-47-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-47-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-47-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-47-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-47.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>ヒントまで含めて問題を出してくれます。また、その後で「答えを教えて」と入力すると、今の問題の回答を教えてくれます。こうして、プログラミング力を鍛えることができます。 </p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-48-1024x576.png" alt="" class="wp-image-22933" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-48-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-48-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-48-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-48-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-48.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h2>5.サンプルデータを作ってもらう</h2>



<p>データベースを学ぶときや、プログラムを作成するときに、ある程度の件数の「ダミーデータ」が欲しいときがあります。そんな時は、次のように箇条書きでお願いしてみましょう。 </p>



<pre class="wp-block-code"><code>次の項目があるダミーデータをJSON形式で10件作って

・都道府県
・会社名
・電話番号
・メールアドレス
・メールマガジン許可（trueかfalseのどちらかの値）</code></pre>



<p>件数が多い場合、途中で止まってしまいますが「続きを書いて」といえば、続けてくれます。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-49-1024x576.png" alt="" class="wp-image-22935" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-49-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-49-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-49-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-49-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-49.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>このように、ChatGPTはいろいろな作業をお願いすることができます。先の通り、ChatGPTを最初に使いはじめると「○○ってなに？」とか「○○のおいしいお店は？」など、その「知識」を期待して会話してしまうのですが、これではChatGPTの性能をまったく発揮することができません。</p>



<p>ChatGPTは、これまで蓄積されたプログラミング言語のバグの情報や、サンプルプログラムの内容やその解説など、「過去」の膨大な情報を蓄積しています。これをうまく引き出してあげれば、プログラミングの学習にものすごい力を発揮します。</p>



<p>是非うまく活用して、スムーズに学習を進めていきましょう。</p>



<ul>
<li><a href="https://openai.com/blog/chatgpt" target="_blank" rel="noreferrer noopener">ChatGPT</a></li>
</ul>
]]></content:encoded>
					
					<wfw:commentRss>https://tomosta.jp/2023/03/chatgpt_for_programming_learning/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
		<post-id xmlns="com-wordpress:feed-additions:1">22918</post-id>	</item>
		<item>
		<title>Emmet入門 &#8211; VisualStudio CodeでEmmetを使おう</title>
		<link>https://tomosta.jp/2023/03/emmet-begin/</link>
					<comments>https://tomosta.jp/2023/03/emmet-begin/#respond</comments>
		
		<dc:creator><![CDATA[たにぐち　まこと]]></dc:creator>
		<pubDate>Fri, 17 Mar 2023 07:20:19 +0000</pubDate>
				<category><![CDATA[入門講座]]></category>
		<category><![CDATA[emmet]]></category>
		<guid isPermaLink="false">https://tomosta.jp/?p=22850</guid>

					<description><![CDATA[HTMLやCSSを短い記述で展開できるEmmetという記法を、VisualStudio Codeで使う方法について紹介します。]]></description>
										<content:encoded><![CDATA[
<figure class="wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio"><div class="wp-block-embed__wrapper">
<iframe loading="lazy" title="Emmet入門 - VisualStudio CodeでEmmetを使おう" width="500" height="281" src="https://www.youtube.com/embed/pqUgx9rJZFA?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>
</div></figure>



<p>Emmet（エメット）とは、HTMLやCSSを短く記述するための「記法」の名前です。HTMLやCSSは、例えば「見出し1」を作りたいというという場合、次のようなHTMLタグを記述する必要があります。</p>



<pre class="wp-block-code"><code>&lt;h1></code></pre>



<p>しかし、HTMLタグには決まった記号が入り交じっていたり、開始タグと終了タグが必要であったりなど、入力が面倒で数が増えると非常に大変です。そこで、Emmet記法を利用すると、次のように記述する事ができます。</p>



<pre class="wp-block-code"><code>h1</code></pre>



<p>タグの名前だけを記述すれば、先のようなタグに展開することができます。これによって、入力文字数を劇的に減らすことができます。</p>



<h2>VisualStudio CodeでEmmetを使おう</h2>



<p>Emmetを利用するには、Emmet記法に対応したエディターを利用するか、プラグインなどが提供されている場合は、これをインストールする必要があります。MicrosoftのVisual Studio Code（以下、VSCode）は標準でEmmetに対応しているため、すぐに使い始めることができます。</p>



<p>まずは、VSCodeを起動したら「ファイル→新規ファイル」で新しいファイルを作成しましょう。そしたら、ファイル名を「index.html」としてデスクトップなどに保存します。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-7-1024x576.png" alt="" class="wp-image-22852" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-7-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-7-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-7-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-7-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-7.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>これで、Emmetを利用する準備が完了です。</p>



<h2>Emmetの書式</h2>



<p>それでは、Emmetの基本から学んでいきましょう。</p>



<h3>要素</h3>



<p>まずは、冒頭にも紹介した要素の展開です。これには、タグの名前だけを記述します。</p>



<pre class="wp-block-code"><code>div
p
h1</code></pre>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-8-1024x576.png" alt="" class="wp-image-22855" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-8-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-8-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-8-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-8-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-8.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>どのような要素でも、展開することができます。</p>



<h3>子要素</h3>



<p>例えば、<code>&lt;ul&gt;</code>タグの子要素に<code>&lt;li&gt;</code>要素を配置したい場合は、<code>&gt;</code>という記号でつなげて記述します。</p>



<pre class="wp-block-code"><code>ul>li</code></pre>



<p>次のように展開されます。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-9-1024x576.png" alt="" class="wp-image-22856" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-9-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-9-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-9-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-9-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-9.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h3>兄弟要素</h3>



<p>同列に並べる兄弟要素にしたい場合は<code>+</code>記号を使います。</p>



<pre class="wp-block-code"><code>div+p+bq</code></pre>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-10-1024x576.png" alt="" class="wp-image-22858" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-10-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-10-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-10-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-10-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-10.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h3>階層を上がる</h3>



<p>例えば、次のようなEmmetがあったとしましょう。</p>



<pre class="wp-block-code"><code>ul>li</code></pre>



<p>ここで、<code>&lt;ul></code>要素と同列の場所に<code>&lt;div></code>を並べたい場合、階層を1つ上がる必要があります。そんな時は<code>^</code>を使います。</p>



<pre class="wp-block-code"><code>ul>li^div</code></pre>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-11-1024x576.png" alt="" class="wp-image-22859" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-11-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-11-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-11-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-11-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-11.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>この記号は、つなげて記述する事で複数、階層を上げることもできます。</p>



<pre class="wp-block-code"><code>div>ul>li^^p</code></pre>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-12-1024x576.png" alt="" class="wp-image-22860" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-12-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-12-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-12-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-12-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-12.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h3>複数展開</h3>



<p>例えば、<code>&lt;li></code>要素を複数展開したい場合、何度も記述しなくても<code>*</code>という記号で繰り返したい回数を指定すれば、一気に展開できます。</p>



<pre class="wp-block-code"><code>ul>li*5</code></pre>



<p>これは、次のように<code>&lt;li></code>が5回繰り返されます。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-14-1024x576.png" alt="" class="wp-image-22863" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-14-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-14-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-14-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-14-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-14.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h3>グループ化</h3>



<p>では、<code>&lt;dt></code>と<code>&lt;dd></code>を複数展開したい場合はどうしたら良いでしょう？　次のようにしてもうまく行きません。</p>



<pre class="wp-block-code"><code>dl>dt*5+dd*5</code></pre>



<p>この場合、<code>&lt;dt></code>だけが先に5回繰り返されてしまいます。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-15-1024x576.png" alt="" class="wp-image-22865" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-15-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-15-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-15-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-15-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-15.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>このような場合は、要素をグループ化します。</p>



<pre class="wp-block-code"><code>dl>(dt+dd)*5</code></pre>



<p>すると、<code>dt+dd</code>がグループになって、5回繰り返されるようになります。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-16-1024x576.png" alt="" class="wp-image-22867" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-16-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-16-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-16-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-16-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-16.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>なお、これは、先の階層の操作にも使えます。グループ化した場合は、階層が下がらないので、そのまま記述できます。</p>



<pre class="wp-block-code"><code>(ul>li)+p</code></pre>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-17-1024x576.png" alt="" class="wp-image-22868" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-17-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-17-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-17-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-17-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-17.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>これは、先の次の記述と同じ意味です。</p>



<pre class="wp-block-code"><code>ul>li^p</code></pre>



<h3>属性</h3>



<p>Emmetでは、タグの展開だけではなく、いくつかの属性を付加することもできます。例えば、<code>#</code>をつなぐとID属性が、<code>.</code>をつなぐとclass属性を付加できます。</p>



<pre class="wp-block-code"><code>div#header+div.page.class1</code></pre>



<p>次のように展開されます。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-18-1024x576.png" alt="" class="wp-image-22870" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-18-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-18-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-18-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-18-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-18.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>class属性は複数指定することもできます。</p>



<p>その他の属性を挿入したい場合は、次のように記述します。</p>



<pre class="wp-block-code"><code>td&#91;title="price" colspan=3]</code></pre>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-19-1024x576.png" alt="" class="wp-image-22871" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-19-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-19-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-19-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-19-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-19.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h3>連番</h3>



<p>繰り返しで挿入するとき、属性に連番を挿入することができます。数字を振りたいところに<code>$</code>記号を挿入します。</p>



<pre class="wp-block-code"><code>ul>li.item$*5</code></pre>



<p>次のように連番が割り振られます。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-20-1024x576.png" alt="" class="wp-image-22873" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-20-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-20-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-20-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-20-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-20.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>桁数を合わせたい場合は、<code>$</code>記号を重ねます。</p>



<pre class="wp-block-code"><code>ul>li.item$$$*5</code></pre>



<p><code>item001</code>のように、3桁で割り振られるようになります。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-21-1024x576.png" alt="" class="wp-image-22874" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-21-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-21-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-21-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-21-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-21.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>また、次のように記述すると、連番の最初の数字を変えることができます。</p>



<pre class="wp-block-code"><code>ul>li.item$@3*5</code></pre>



<p>さらに、<code>-</code>を加えると大きい数字から割り振られます。</p>



<pre class="wp-block-code"><code>ul>li.item$@-3*5</code></pre>



<h3>要素の内容の指定</h3>



<p>Emmetでは、要素の中に指定するテキスト内容なども一気に記述できます。<code>{ }</code>で囲んで指定します。</p>



<pre class="wp-block-code"><code>a{Click me}</code></pre>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-22-1024x576.png" alt="" class="wp-image-22876" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-22-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-22-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-22-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-22-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-22.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>次のようなEmmetで入れ子になった複雑なHTMLを作ることもできます。</p>



<pre class="wp-block-code"><code>p>{お問い合わせは}+a{こちら}+{をクリックしてください}</code></pre>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-23-1024x576.png" alt="" class="wp-image-22877" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-23-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-23-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-23-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-23-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-23.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p><code>p</code>の後に<code>></code>がついていることに気をつけましょう。これがないと、次のようなHTMLになってしまいます。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-24-1024x576.png" alt="" class="wp-image-22878" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-24-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-24-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-24-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-24-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-24.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h3>要素の省略</h3>



<p>要素の名前は、省略することができる場合があります。例えば、次のように記述すると自動的に<code>&lt;div></code>タグが挿入されます。</p>



<pre class="wp-block-code"><code>.wrap>.content</code></pre>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-25-1024x576.png" alt="" class="wp-image-22880" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-25-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-25-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-25-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-25-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-25.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>この時、省略すると常に<code>&lt;div></code>タグになるという訳ではなく、Emmetが自動的に解釈して適切なタグを挿入します。例えば、<code>&lt;em></code>の子要素の場合はインラインの要素が適切なため、<code>&lt;span></code>タグになります。</p>



<pre class="wp-block-code"><code>em>.info</code></pre>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-26-1024x576.png" alt="" class="wp-image-22882" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-26-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-26-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-26-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-26-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-26.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>その他、<code>&lt;ul></code>や<code>&lt;ol></code>の子要素の場合は<code>&lt;li></code>に、<code>&lt;table></code>の子要素の場合は<code>&lt;tr></code>や、その子要素なら<code>&lt;td></code>になるなど、柔軟に解釈してくれます。</p>



<h3>HTMLの基本タグ</h3>



<p><code>!</code>または、<code>html:5</code>と入力して展開すると、HTMLの基本タグを一気に挿入できます。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-27-1024x576.png" alt="" class="wp-image-22883" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-27-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-27-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-27-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-27-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-27.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>ただし、ここで挿入されるHTMLは<code>lang</code>属性が英語を表す<code>en</code>になっているため、日本語コンテンツを作成する場合は<code>ja</code>に変更しないと、Google Chromeなどで翻訳ツールが起動してしまうことがあるので注意しましょう。これをカスタマイズする方法は後述します。</p>



<h3>Lorem ipsum</h3>



<p>Lorem ipsumとは、Webページなどを制作するときに、まだ実際に挿入される原稿が決まっていない場合に、表示の様子を確認するために入れる「ダミー原稿」としてよく使われています。</p>



<p>Emmetでは<code>lorem</code>または<code>ipsum</code>というキーワードで、このLorem ipsumを挿入することができます。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-28-1024x576.png" alt="" class="wp-image-22885" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-28-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-28-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-28-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-28-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-28.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>とはいえ、Lorem ipsumは英文なので、日本語コンテンツを作る場合には少し使いにくいでしょう。</p>



<h2>CSSのEmmet</h2>



<p>Emmetは、CSSもサポートしています。CSSのEmmetを利用する場合は、VSCodeの「言語モード」が「CSS」や「SCSS」になっている必要があります。ファイルに<code>.css</code>という拡張子をつけて保存するか、言語モードを切り替えてから利用しましょう。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-29-1024x576.png" alt="" class="wp-image-22886" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-29-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-29-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-29-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-29-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-29.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h3>プロパティ名の省略</h3>



<p>例えば、てきとうなセレクタを入力した後、<code>m</code>とだけ入力して展開してみましょう。<code>margin</code>プロパティに変化します。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-30-1024x576.png" alt="" class="wp-image-22887" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-30-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-30-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-30-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-30-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-30.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>その他、<code>p</code>が<code>padding</code>、<code>bg</code>が<code>background</code>など数文字の省略文字が定義されています。すべての省略文字を確認するには、チートシートを見ると良いでしょう。</p>



<ul>
<li><a href="https://docs.emmet.io/cheat-sheet/" data-type="URL" data-id="https://docs.emmet.io/cheat-sheet/">Emmetチートシート</a></li>
</ul>



<p>また、いくつかのプロパティには値の指定も併せて行える省略形が定義されています。例えば、<code>m10</code>という記述は<code>margin: 10px</code>に展開されます。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-31-1024x576.png" alt="" class="wp-image-22889" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-31-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-31-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-31-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-31-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-31.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>単位は基本的には<code>px</code>が使われますが、例えば小数を指定した場合などは、自動的に<code>em</code>に変化します。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-32-1024x576.png" alt="" class="wp-image-22890" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-32-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-32-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-32-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-32-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-32.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>または、単位を明示することもできます。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-33-1024x576.png" alt="" class="wp-image-22891" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-33-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-33-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-33-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-33-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-33.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>さらに、この単位についても次のような省略形が定義されています。</p>



<ul>
<li>p → %</li>



<li>e → em</li>



<li>x → ex</li>
</ul>



<h3>ショートハンドの一括指定</h3>



<p><code>margin</code>プロパティなどの、ショートハンドプロパティの場合、次のように複数の値を指定することができます。</p>



<pre class="wp-block-code"><code>m10px20px30px40px</code></pre>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-34-1024x576.png" alt="" class="wp-image-22894" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-34-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-34-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-34-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-34-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-34.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h3>カラーコードの指定</h3>



<p>カラーコードの入力の際にもEmmetが発動することがあります。例えば、<code>#111</code>というカラーコードを指定したい場合は、次のように入力するとEmmetが発動します。</p>



<pre class="wp-block-code"><code>color: #1</code></pre>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-35-1024x576.png" alt="" class="wp-image-22896" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-35-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-35-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-35-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-35-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-35.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h3>!important指定</h3>



<p>プロパティに<code>!important</code>を指定したい場合は<code>:!</code>を付加します。（Emmetのリファレンスでは<code>!</code>のみですが、VSCodeの場合は<code>:!</code>になっているようです）</p>



<pre class="wp-block-code"><code>m10e:!</code></pre>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-36-1024x576.png" alt="" class="wp-image-22898" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-36-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-36-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-36-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-36-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-36.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>なお、Emmet公式ドキュメントでは「ベンダープリフィクス」の記述もサポートされているようですが、VSCodeでは利用できないようです。近年ではSassなどで挿入することの方が多いので、Emmetで利用する機会が少ないためなどかも知れません。</p>



<h2>Emmetのアクション</h2>



<p>Emmetには、省略記法だけではなく、HTMLの操作に便利な「アクション」がいくつか定義されています。VSCodeでも「コマンドパレット」（表示→コマンドパレット）を利用すると、各アクションを利用できます。それぞれ紹介しましょう。</p>



<h3>Emmet記法の展開</h3>



<p>Emmet記法を展開します。標準で<code>Tab</code>キーにショートカットが割り当てられています。</p>



<h3>一致するペアに移動</h3>



<p>カーソルがタグ名にある時、そのペアとなる開始タグまたは終了タグに移動します</p>



<h3>バランス（外側・内側）</h3>



<p>選択範囲を広げたり、縮めたりすることができます。要素を一気に選択できます。</p>



<h3>ラップ変換</h3>



<p>タグで囲み忘れた本文などを選択後、このアクションを実行すると後からHTMLタグで囲むことができます。</p>



<h3>編集点に移動</h3>



<p>Emmetで要素を展開した後、変更可能な箇所に移動できます。例えば属性の値を要素の値を順番に変更するなどができます。</p>



<h3>項目を選択</h3>



<p>次のHTML要素、前のHTML要素に移動できます。</p>



<h3>コメントの切り替え</h3>



<p>カーソルのある行をコメントにしたり、コメントを外すことができます。</p>



<h3>タグの分割・結合</h3>



<p>空要素のタグを<code>&lt;p/&gt;</code>や<code>&lt;p&gt;&lt;/p&gt;</code>に変換できます。</p>



<h3>タグの削除</h3>



<p>タグの開始タグと終了タグを一気に削除できます。</p>



<h3>行のマージ</h3>



<p>要素内の改行を削除して、1行に納めます</p>



<h3>イメージサイズの更新</h3>



<p><code>&lt;img&gt;</code>タグで、<code>width/height</code>属性を省略している場合に、画像の実サイズからこれらの属性を挿入できます。</p>



<h3>数式の評価</h3>



<p>次のように、数式を記述してアクションを発動すると、計算結果を反映してくれます。</p>



<pre class="wp-block-code"><code>margin: 2*4
↓
margin: 8</code></pre>



<h3>増加・減少</h3>



<p>CSSプロパティの数字部分にカーソルを合わせてアクションを発動すると、指定された値ずつ増加したり、減少させたりできます。</p>



<h3>CSS値を反映</h3>



<p>ベンダープリフィクスの付加された、同じプロパティの時に1つの値を変更してからアクションを発動すると、すべてのプロパティの値を変更することができます。</p>



<p>Emmetの公式ドキュメントにはこの他、「画像のdata:URLへのエンコード・デコード」というコマンドもありますが、VSCodeには実装されていないようです。</p>



<h2>Emmetのカスタマイズ</h2>



<p>Emmetの挙動は自分でカスタマイズすることができます。それには「snippets.json」というJSONファイルを準備して読み込ませます。</p>



<p>まずは、次のような内容のファイルを作成して、てきとうな場所に保存しましょう。ユーザーフォルダーの中などが良いでしょう。</p>



<pre class="wp-block-code"><code>{
    "variables": {
    }
}</code></pre>



<p>そしたら、VSCodeの設定で「拡張機能→Emmet」の「Extensions Path」の設定で「項目の追加」をクリックします。</p>



<p>そして、JSONファイルが含まれているフォルダのパスを入力しましょう。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-37-1024x576.png" alt="" class="wp-image-22899" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-37-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-37-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-37-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-37-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-37.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>これでカスタマイズの準備が完了です。このJSONファイルを変更すると、Emmetの動作をカスタマイズできます。</p>



<h3>lang属性をjaに変更</h3>



<p>まずは、<code>!</code>でEmmetを展開したときに<code>&lt;html></code>タグの<code>lang</code>属性が<code>en</code>になってしまうのを、<code>ja</code>にカスタマイズしましょう。<code>snippets.json</code>に次のように追加します。</p>



<pre class="wp-block-code"><code>"variables": {
    "lang": "ja"
},</code></pre>



<p>ファイルを保存して、Emmetを入力してみると<code>lang</code>属性が変わっていることが分かります。</p>



<h3>オリジナルのHTMLタグを作ろう</h3>



<p>オリジナルのタグを作ることもできます。例えばここでは、次のようなHTMLを一気に挿入できる<code>list</code>というスニペットを作ってみましょう。</p>



<p>次のように追加します。</p>



<pre class="wp-block-code"><code>"html": {
    "snippets": {
        "list": "ul>li{${1}}*3"
    }
}</code></pre>



<p>こうして、<code>list</code>と入力してEmmetを展開すると、HTMLが生成できます。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-38-1024x576.png" alt="" class="wp-image-22900" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-38-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-38-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-38-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-38-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-38.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>スニペット内に<code>{${1}}</code>と記述すると、カーソルがそこに移動します。次のように記述すると、あらかじめ値を入れることもできます。</p>



<pre class="wp-block-code"><code>"list": "ul>li{${1:item}}*3"</code></pre>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-39-1024x576.png" alt="" class="wp-image-22901" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-39-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-39-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-39-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-39-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-39.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h3>オリジナルのCSSプロパティを作ろう</h3>



<p>同じくCSSも作ることができます。次のように追加しましょう。</p>



<pre class="wp-block-code"><code>"css": {
  "snippets": {
    "dark": "background-color: #000;\ncolor: #fff;"
  }
}</code></pre>



<p>CSSファイルのセレクタ内で、<code>dark</code>と入力して展開すると、次のような背景と文字色が反転したスタイルを一気に書き込めます。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-40-1024x576.png" alt="" class="wp-image-22903" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-40-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-40-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-40-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-40-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-40.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>よく使うスニペットを登録しておくとよいでしょう。</p>



<p>Emmetを利用すると、非常にすばやくHTMLを記述できるようになるため、少しずつでも使っていくと良いでしょう。</p>
]]></content:encoded>
					
					<wfw:commentRss>https://tomosta.jp/2023/03/emmet-begin/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
		<post-id xmlns="com-wordpress:feed-additions:1">22850</post-id>	</item>
		<item>
		<title>JavaScript Web Animations APIを使って、アニメエフェクトを作ろう</title>
		<link>https://tomosta.jp/2023/03/javascript_web_animations_api/</link>
					<comments>https://tomosta.jp/2023/03/javascript_web_animations_api/#respond</comments>
		
		<dc:creator><![CDATA[たにぐち　まこと]]></dc:creator>
		<pubDate>Fri, 10 Mar 2023 06:40:23 +0000</pubDate>
				<category><![CDATA[入門講座]]></category>
		<category><![CDATA[JavaScript]]></category>
		<guid isPermaLink="false">https://tomosta.jp/?p=22810</guid>

					<description><![CDATA[Webページにアニメーションを実装したいとき、Web Animations APIが利用できます。ここでは、文字を動かすアニメーションを制作してみましょう。]]></description>
										<content:encoded><![CDATA[
<p></p>



<p>Webページを制作するとき、近年では各要素を動かす演出を入れるのが一般的になりました。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-1024x576.png" alt="" class="wp-image-22812" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>これらは、JavaScriptのライブラリを使ったり、CSSのアニメーション機能を使うことがありますが、JavaScriptにも「Web Animations API」という標準の機能が準備されています。</p>



<p>IEなどでは利用できないものの、最近のモダンブラウザでは利用でき、CSSアニメーションに比べると手軽に実装ができます。ここでは、Manaさん著の JavaScript入門書籍『<a href="https://amzn.to/3mBhkiN" target="_blank" rel="noreferrer noopener">1冊ですべて身につくJavaScript入門講座</a>』から、文字の演出プログラムを制作してみましょう。</p>



<h2>HTMLを準備しよう</h2>



<p>まずは、HTMLを準備しましょう。ここでは、見出しを準備してid属性を付加しておきます。</p>



<pre class="wp-block-code"><code>&lt;!DOCTYPE html&gt;
&lt;html lang="ja"&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
    &lt;title&gt;6-4 見出しを下から浮き上がらせよう&lt;/title&gt;

    &lt;link rel="stylesheet" href="css/style.css"&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h1 id="heading"&gt;JavaScriptでアニメーション&lt;/h1&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<p>ここでは、見出しを準備してid属性を付加しておきます。そして、スタイルシートを準備します。ここでは単に、位置を中央揃えに変更しました。</p>



<pre class="wp-block-code"><code>h1 {
  text-align: center;
}</code></pre>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-1-1024x576.png" alt="" class="wp-image-22815" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-1-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-1-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-1-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-1-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-1.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h2>JavaScriptを準備しよう</h2>



<p>続いて、JavaScriptを準備しましょう。<code>js/script.js</code>というファイルを作成して、次のように記述します。</p>



<pre class="wp-block-code"><code>const heading = document.querySelector('#heading');

const keyframes = {
}

heading.animate(keyframes, 2000);</code></pre>



<p>これを、先ほどのHTMLから読み込みます。</p>



<pre class="wp-block-code"><code>...
  &lt;script src="js/script.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<p>まだ現状では、表示に影響はありません。これで準備完了です。今作成した<code>script.js</code>を書き換えていきましょう。</p>



<h2>フェードインアニメーションを使おう</h2>



<p>それでは、このタイトルをフェードインで表示してみましょう。JavaScriptの<code>keyframes</code>に次のように設定します。</p>



<pre class="wp-block-code"><code>const keyframes = {
  opacity: &#91;0, 1]
}</code></pre>



<p>これで再読み込みすると、タイトルがフェードインで表示されます。不透明度（opacity）を、開始位置（0）から終了位置（1）まで変化させるという指示を作っています。これを、<code>animate</code>メソッドに指定します。</p>



<p><code>animate</code>メソッドでは、次のようなパラメーターで動きを指定できます。</p>



<pre class="wp-block-code"><code>動かす要素.animate(動かす内容, 再生時間);</code></pre>



<p>ここでは、作成した<code>keyframes</code>を2000ミリ秒=2秒でアニメーションさせました。CSSで変化できる内容であれば、基本的には動かすことができます。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-2-1024x576.png" alt="" class="wp-image-22816" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-2-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-2-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-2-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-2-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-2.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h2>複数の動きを指定しよう</h2>



<p><code>keyframes</code>には、複数のプロパティを指定することもできます。ここでは、<code>translate</code>を指定して、下から上に向かってアニメーションするように指定してみましょう。</p>



<pre class="wp-block-code"><code>const keyframes = {
  opacity: &#91;0, 1],
  translate: &#91;'0 50px', 0]
}</code></pre>



<p>これで表示しましょう。ここでは、最初の位置がx軸が0、y軸が50pxの場所に配置して、終了位置としてx軸、y軸ともに0を指定しています。これにより、縦方向に50pxアニメーションします。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-3-1024x576.png" alt="" class="wp-image-22817" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-3-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-3-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-3-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-3-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-3.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h2>動きの詳細を指定しよう</h2>



<p><code>animate</code>メソッドの2つめのパラメーターには、実は動きの詳細を指定することができます。次のように変更しましょう。</p>



<pre class="wp-block-code"><code>const options = {
  duration: 2000,
  easing: 'ease'
}</code></pre>



<p>そして、<code>animate</code>メソッドのパラメーターにこれを指定しましょう。</p>



<pre class="wp-block-code"><code>heading.animate(keyframes, options);</code></pre>



<p>これにより、2000ミリ秒で動作するのはそのまま、「イージング」が聞くようになって、ふわっと動くようになります。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-4-1024x576.png" alt="" class="wp-image-22819" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-4-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-4-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-4-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-4-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-4.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h2>色を変更しよう</h2>



<p>最後に、アニメーションの内容を変更して色が変化するようにしてみましょう。<code>keyframes</code>を次のように変更します。</p>



<pre class="wp-block-code"><code>const keyframes = {
  color: &#91;'#f66', '#fc2', '#0c6', '#0bd']
}</code></pre>



<p>これで、見出しの色が次々に変化するようになります。<code>options</code>に次のように指定すると、ずっとアニメーションが繰り返されるようになります。</p>



<pre class="wp-block-code"><code>const options = {
  duration: 8000,
  direction: 'alternate',
  iterations: Infinity
}</code></pre>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-5-1024x576.png" alt="" class="wp-image-22820" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-5-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-5-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-5-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-5-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-5.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h2>その他の本格アニメーションも制作できる</h2>



<p>このように、<code>animate</code>メソッドを利用すれば、ちょっとしたアニメーションをライブラリなどを使うことなく実装することができます。</p>



<p>今回参考にさせて頂いた『<a href="https://amzn.to/3mBhkiN" target="_blank" rel="noreferrer noopener">1冊ですべて身につくJavaScript入門講座</a>』にはこの他にも、</p>



<ul>
<li>背景がのびる見出しを作る</li>



<li>ふよふよ動く見出しを作る</li>
</ul>



<p>といったアニメーションの実装方法が紹介されています。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-6-1024x576.png" alt="" class="wp-image-22821" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-6-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-6-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-6-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-6-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-6.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>JavaScriptが初めてという方でも、基本の部分から紹介されているので安心して読み進めることができ、最終的にはスクロール時に要素が表示されるWebページを制作しながら、JavaScriptの技術を学ぶことができるので、かなり実践的なところまでこの1冊で網羅することができるでしょう。</p>



<p>これからJavaScriptを学んで行きたいという方には、最適な1冊でした。是非、</p>
]]></content:encoded>
					
					<wfw:commentRss>https://tomosta.jp/2023/03/javascript_web_animations_api/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
		<post-id xmlns="com-wordpress:feed-additions:1">22810</post-id>	</item>
		<item>
		<title>Figmaでプレゼンテーション資料を作ろう</title>
		<link>https://tomosta.jp/2023/02/figma-presentation/</link>
					<comments>https://tomosta.jp/2023/02/figma-presentation/#respond</comments>
		
		<dc:creator><![CDATA[たにぐち　まこと]]></dc:creator>
		<pubDate>Mon, 20 Feb 2023 09:51:41 +0000</pubDate>
				<category><![CDATA[入門講座]]></category>
		<category><![CDATA[Figma]]></category>
		<guid isPermaLink="false">https://tomosta.jp/?p=22773</guid>

					<description><![CDATA[ここでは、2023年2月8日に技術評論社から発売された、『Figmaデザイン入門〜UIデザイン、プロトタイピングからチームメンバーとの連携まで〜（綿貫 佳祐著）』の中から、会社紹介資料を作成する手順を紹介しましょう。]]></description>
										<content:encoded><![CDATA[
<p>Figmaは、UIデザインやWebデザインの設計ツールですが、実際にはプレゼンテーション資料や、印刷物なども作ることができます。</p>



<p>ここでは、2023年2月8日に技術評論社から発売された、『<a rel="noreferrer noopener" href="https://amzn.to/411lvUO" target="_blank">Figmaデザイン入門〜UIデザイン、プロトタイピングからチームメンバーとの連携まで〜</a>（綿貫 佳祐著）』の中から、会社紹介資料を作成する手順を紹介しましょう。</p>



<figure class="wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio"><div class="wp-block-embed__wrapper">
<iframe loading="lazy" title="Figmaでプレゼンテーション資料を作ろう" width="500" height="281" src="https://www.youtube.com/embed/RdxClGSg4iE?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>
</div></figure>
]]></content:encoded>
					
					<wfw:commentRss>https://tomosta.jp/2023/02/figma-presentation/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
		<post-id xmlns="com-wordpress:feed-additions:1">22773</post-id>	</item>
		<item>
		<title>SvelteKitの基本を Svelte Tutorialで学ぼう</title>
		<link>https://tomosta.jp/2022/12/sveltekit/</link>
					<comments>https://tomosta.jp/2022/12/sveltekit/#respond</comments>
		
		<dc:creator><![CDATA[たにぐち　まこと]]></dc:creator>
		<pubDate>Sun, 18 Dec 2022 08:01:19 +0000</pubDate>
				<category><![CDATA[入門講座]]></category>
		<category><![CDATA[Svelte]]></category>
		<guid isPermaLink="false">https://tomosta.jp/?p=22635</guid>

					<description><![CDATA[JavaScriptのフレームワーク、SvelteKitの使い方を、Svelte公式のチュートリアルを利用しながら一緒に学んで行きましょう]]></description>
										<content:encoded><![CDATA[
<figure class="wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio"><div class="wp-block-embed__wrapper">
<iframe loading="lazy" title="SvelteKitのルーティング機能で複数のページを作成しよう" width="500" height="281" src="https://www.youtube.com/embed/5oCxqqfsPxY?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>
</div></figure>



<p>2022年12月15日に、<a href="https://svelte.jp/blog/announcing-sveltekit-1.0" target="_blank" rel="noreferrer noopener">SvelteKitが正式リリースされました</a>。SvelteKitは、ReactのNext.jsやVue.jsのNuxt等と同様に、SvelteというJavaScriptライブラリを利用したフレームワークです。</p>



<p>複数のページで構成されるWebサイトを制作したり、データベースと連携したアプリを開発したりでき、Next.jsやNuxtに比べるとシンプルで作りやすい印象があります。</p>



<p>ここでは、Svelteを学習できる「Svelte Tutorial」のSvelteKitのセクションを進めながら、説明が英語なので日本語で補足をしていきましょう。</p>



<h2>Svelteチュートリアルを起動しよう</h2>



<p>Svelteチュートリアルは、Svelteのドキュメントからアクセスできます。</p>



<figure class="wp-block-embed is-type-rich is-provider-wp-oembed-blog-card wp-block-embed-wp-oembed-blog-card"><div class="wp-block-embed__wrapper">
<a href="https://learn.svelte.dev/tutorial/welcome-to-svelte" rel="nofollow">https://learn.svelte.dev/tutorial/welcome-to-svelte</a>
</div></figure>



<p>最初はSvelte自身のチュートリアルが展開されるので、SvelteKitのチュートリアルは次のページから始まります。</p>



<figure class="wp-block-embed is-type-rich is-provider-wp-oembed-blog-card wp-block-embed-wp-oembed-blog-card"><div class="wp-block-embed__wrapper">
<a href="https://learn.svelte.dev/tutorial/introducing-sveltekit" rel="nofollow">https://learn.svelte.dev/tutorial/introducing-sveltekit</a>
</div></figure>



<p>すると、左側に説明が、右側にエディター（上部）とブラウザー（下部）に展開されます。上部のエディターのファイルを変更すると、すぐに下のWebブラウザで確認できます。</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/12/image-1024x576.png" alt="" class="wp-image-22641" srcset="https://tomosta.jp/wp-content/uploads/2022/12/image-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/12/image-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/12/image-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/12/image-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/12/image.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure></div>


<p>例えば今、<code>&lt;h1&gt;</code>要素があるので内容を書き換えると、リアルタイムに書き換わることが確認できます。</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/12/image-1-1024x576.png" alt="" class="wp-image-22642" srcset="https://tomosta.jp/wp-content/uploads/2022/12/image-1-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/12/image-1-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/12/image-1-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/12/image-1-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/12/image-1.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure></div>


<h2>Svelteを体験しよう</h2>



<p>SvelteKitを利用して生成されたページには、Svelteを利用する事ができます。Svelteでは、<code>{ ... }</code>という記述を埋め込むと、変数の内容を等をリアルタイムに反映できます。まずは、次のように変数を宣言しましょう。Svelteでは、ファイルの上部に<code>&lt;script&gt;</code>タグを埋め込めます。</p>



<pre class="wp-block-code"><code>&lt;script&gt;
    let name = 'ともすた'
&lt;/script&gt;

&lt;h1&gt;Welcome to tomosta&lt;/h1&gt;
...</code></pre>



<p>そしたら、本文内に次のように埋め込んでみましょう。</p>



<pre class="wp-block-code"><code>...
&lt;h1&gt;Welcome to { name }&lt;/h1&gt;</code></pre>



<p>変数の内容を変更すれば、リアルタイムに書き換わります。</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/12/image-2-1024x576.png" alt="" class="wp-image-22644" srcset="https://tomosta.jp/wp-content/uploads/2022/12/image-2-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/12/image-2-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/12/image-2-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/12/image-2-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/12/image-2.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure></div>


<h2>ファイルの構成を確認しよう</h2>



<p>SvelteKitはインストールすると、次のようなフォルダーやファイルが自動で生成されます。</p>



<ul>
<li>src/app.html<br>このファイルが実際にWebブラウザに表示されます<code>&lt;head&gt;</code>要素を変えたい場合などはこのファイルを変更します</li>



<li>src/routes<br>各ページのファイルが格納されます</li>



<li>static<br>画像ファイルなどのリソースファイルなどを格納します</li>



<li>svelte.config.js<br>SvelteKitの設定ファイルです</li>
</ul>



<p>この他、Node.jsの設定を行う「package.json」と、Viteというビルドツールの設定ファイルである「vite.config.js」が設置されていますが、これらについてはここでは省略します。「Node.js」や「Vite」などを学習しましょう。</p>



<h2>ページを増やそう</h2>



<p>左側の画面下にある、次ページへのリンクを何度かクリックして「<a href="https://learn.svelte.dev/tutorial/pages" target="_blank" rel="noreferrer noopener">Pages</a>」というページまで移動しましょう。図のように、「home」と「about」というナビゲーションがあるページが表示されます。</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/12/image-3-1024x576.png" alt="" class="wp-image-22645" srcset="https://tomosta.jp/wp-content/uploads/2022/12/image-3-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/12/image-3-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/12/image-3-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/12/image-3-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/12/image-3.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure></div>


<p>しかし、現状では「about」をクリックしてもページが見つかりません。そこで、このアドレスにページを追加しましょう。</p>



<p>SvelteKitは、<code>src/routes</code>フォルダーの中に特定の名前でフォルダーやファイルを作成すると、自動的にアドレスが生成されるしくみです。例えば、<code>/about</code>というアドレスを作りたい場合は、<code>/src/</code>フォルダーの中に<code>about</code>という名前のフォルダーを作成します。</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/12/image-4-1024x576.png" alt="" class="wp-image-22647" srcset="https://tomosta.jp/wp-content/uploads/2022/12/image-4-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/12/image-4-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/12/image-4-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/12/image-4-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/12/image-4.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure></div>


<p>そしたら、このフォルダーの中に<code>+page.svelte</code>という名前のファイルを作成しましょう。ファイル名の先頭が「+」になっていたり、拡張子が<code>.svelte</code>となっていますが、このファイル名で固定になっています。</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/12/image-5-1024x576.png" alt="" class="wp-image-22648" srcset="https://tomosta.jp/wp-content/uploads/2022/12/image-5-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/12/image-5-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/12/image-5-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/12/image-5-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/12/image-5.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure></div>


<p>これでファイルを作れば、すぐにアクセスができるようになります。後はこのファイルに内容を作っていけば、ページを増やすことができます。</p>



<h2>レイアウトファイルを使おう</h2>



<p><a href="https://learn.svelte.dev/tutorial/layouts" target="_blank" rel="noreferrer noopener">次ページ</a>にアクセスしましょう。</p>



<p>サイト内で使う共通のパーツなどの場合は、個別に作成するよりは共通パーツにした方が良いでしょう。このような時は、レイアウトファイルを利用できます。</p>



<p><code>src/routes</code>フォルダーに<code>+layout.svelte</code>ファイルを作成しましょう。すると、<code>/</code>や<code>/about</code>が真っ白のページに変わりますが、すでにレイアウトファイルが採用されるようになっています。</p>



<figure class="wp-block-embed is-type-rich is-provider-wp-oembed-blog-card wp-block-embed-wp-oembed-blog-card"><div class="wp-block-embed__wrapper">
<a href="https://learn.svelte.dev/tutorial/layouts" rel="nofollow">https://learn.svelte.dev/tutorial/layouts</a>
</div></figure>



<p>各ページの内容を反映するには<code>&lt;slot /&gt;</code>という特別なタグを使います。</p>



<pre class="wp-block-code"><code>&lt;slot /&gt;</code></pre>



<p>このタグの前後には、共通のパーツを追加することができます。例えばここでは、<code>src/routes/+page.svelte</code>ファイルに書かれているナビゲーションを設置してみましょう。<code>&lt;nav&gt;</code>要素全体を切り取って、<code>+layout.svelte</code>に貼り付けておきましょう。</p>



<pre class="wp-block-code"><code>&lt;nav&gt;
&lt;a href="/"&gt;home&lt;/a&gt;
&lt;a href="/about"&gt;about&lt;/a&gt;
&lt;/nav&gt;

&lt;slot /&gt;</code></pre>



<h2>パラメータを指定できるようにしよう</h2>



<p><a href="https://learn.svelte.dev/tutorial/params" target="_blank" rel="noreferrer noopener">次ページ</a>にアクセスしましょう。</p>



<p>こうして、ページを増やしていく事はできますが、例えばブログのしくみを作ろうとした場合、各記事の内容はページとしては存在せずに、別のヘッドレスCMSやデータベースからデータを取得する事がほとんどです。</p>



<p>そのため、<code>/blog/one</code>とか<code>/blog/two</code>など、さまざまなアドレスを指定したときにも対応できるようにしましょう。これには、パラメータを受け取れるようにします。<code>/src/routes/blog</code>フォルダーに、<code>[slug]</code>というフォルダーを作成しましょう。</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/12/image-6-1024x576.png" alt="" class="wp-image-22652" srcset="https://tomosta.jp/wp-content/uploads/2022/12/image-6-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/12/image-6-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/12/image-6-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/12/image-6-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/12/image-6.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure></div>


<p>このフォルダーの中に、これまでと同様に<code>+page.svelte</code>ファイルを作成してページ内容を作成しましょう。これで、<code>/blog/one</code>などのアドレスが指定されたときに、このファイルが表示されるようになります。</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/12/image-7-1024x576.png" alt="" class="wp-image-22653" srcset="https://tomosta.jp/wp-content/uploads/2022/12/image-7-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/12/image-7-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/12/image-7-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/12/image-7-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/12/image-7.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure></div>


<h2>JSONファイルと連携しよう</h2>



<p><a href="https://learn.svelte.dev/tutorial/page-data" target="_blank" rel="noreferrer noopener">次ページ</a>にアクセスしましょう。</p>



<p>では、ブログの記事を外部のデータから取得しましょう。ここでは、JSONデータから取得します。ブログ記事は<code>src/routes/blog/data.js</code>ファイルに準備されています。これを読み込んで、一覧画面を作成してみましょう。</p>



<p>まずは、これを読み込むためのプログラムを作成します。これには<code>/src/routes/blog/+page.server.js</code>というファイル名で作成しましょう。</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/12/image-8-1024x576.png" alt="" class="wp-image-22655" srcset="https://tomosta.jp/wp-content/uploads/2022/12/image-8-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/12/image-8-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/12/image-8-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/12/image-8-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/12/image-8.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure></div>


<p>次のように書き込みます。</p>



<pre class="wp-block-code"><code>import { posts } from './data.js';

export function load() {
    return {
        summaries: posts.map((post) =&gt; ({
            slug: post.slug,
            title: post.title
        }))
    };
}</code></pre>



<p>すると、同じ場所にある<code>+page.svelte</code>ファイルから<code>data</code>として受け取ることができるようになります。<code>/src/routes/blog/+page.svelte</code>ファイルを次のように変更しましょう。</p>



<pre class="wp-block-code"><code>&lt;script&gt;
    export let data;
&lt;/script&gt;

&lt;h1&gt;blog&lt;/h1&gt;

&lt;ul&gt;
    {#each data.summaries as { slug, title }}
        &lt;li&gt;&lt;a href="/blog/{slug}"&gt;{title}&lt;/a&gt;&lt;/li&gt;
    {/each}
&lt;/ul&gt;</code></pre>



<p>各個別のページも同じように作成します。<code>/src/routes/blog/[slug]</code>フォルダーに<code>+page.server.js</code>ファイルを作成します。</p>



<pre class="wp-block-code"><code>import { posts } from '../data.js';

export function load({ params }) {
    const post = posts.find((post) =&gt; post.slug === params.slug);

    return {
        post
    };
}</code></pre>



<p>ここでは<code>find</code>メソッドを使って、URLで指定されているパラメーター（slug）と一致するデータだけを取得しています。</p>



<p>後は、<code>/src/routes/blog/[slug]/+page.svelte</code>は次のようになります。</p>



<pre class="wp-block-code"><code>&lt;script&gt;
    export let data;
&lt;/script&gt;

&lt;h1&gt;blog post&lt;/h1&gt;
&lt;h1&gt;{data.post.title}&lt;/h1&gt;
&lt;div&gt;{@html data.post.content}&lt;/div&gt;</code></pre>



<p>本文を表示している<code>{@html ...}</code>というのは、データの中にHTMLのタグがあった場合に、そのまま内容を表示するというプレースホルダーです。これを使う場合、データ内の安全性がSvelteでは保障されなくなるため、注意をして利用しましょう。必要に応じて、手作業でエスケープ処理などをする必要があります。</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/12/image-9-1024x576.png" alt="" class="wp-image-22657" srcset="https://tomosta.jp/wp-content/uploads/2022/12/image-9-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/12/image-9-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/12/image-9-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/12/image-9-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/12/image-9.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure></div>


<h2>不正なパラメーターが指定されたときにページが見つからない処理をしよう</h2>



<p>現状、アドレスを書き換えて不正な内容などに変更すると、JSONのデータが取得できないため「Internal Error」が発生してしまいます。しかし、実際にはページの削除などもあるため、一般的なページが見つからない場合のエラー処理をしていきましょう。これには<code>/src/routes/blog/[slug]/+page.server.js</code>に次のように記述して、404エラーコードを返却します。</p>



<pre class="wp-block-code"><code>export function load({ params }) {
    const post = posts.find((post) =&gt; post.slug === params.slug);

    if (!post) throw error(404); // 追加

    return {
        post
    };
}</code></pre>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/12/image-10-1024x576.png" alt="" class="wp-image-22659" srcset="https://tomosta.jp/wp-content/uploads/2022/12/image-10-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/12/image-10-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/12/image-10-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/12/image-10-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/12/image-10.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure></div>


<h2>共通して利用するデータをロードしよう</h2>



<p>各ページで利用したいデータは、先の通り<code>+page.server.js</code>というファイルを準備しますが、もし一覧でも個別のページでも共通して利用したいデータがある場合は、<code>+layout.server.js</code>というファイルが利用できます。</p>



<p>まずは、<code>/src/routes/blog/+page.server.js</code>を<code>/src/routes/blog/+layout.server.js</code>に名前を変えましょう。これで、他のファイルからも参照ができるようになります。</p>



<p>そしたら、<code>/src/routes/blog/[slug]/+layout.svelte</code>に次のように追加します。</p>



<pre class="wp-block-code"><code>&lt;script&gt;
    export let data;
&lt;/script&gt;

&lt;div class="layout"&gt;
    &lt;main&gt;
        &lt;slot /&gt;
    &lt;/main&gt;

    &lt;aside&gt;
        &lt;h2&gt;More posts&lt;/h2&gt;
        &lt;ul&gt;
            {#each data.summaries as { slug, title }}
                &lt;li&gt;
                    &lt;a href="/blog/{slug}"&gt;{title}&lt;/a&gt;
                &lt;/li&gt;
            {/each}
        &lt;/ul&gt;
    &lt;/aside&gt;
&lt;/div&gt;</code></pre>



<p>これで、各ページに最新のエントリーが表示されるようになります。</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/12/image-11-1024x576.png" alt="" class="wp-image-22660" srcset="https://tomosta.jp/wp-content/uploads/2022/12/image-11-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/12/image-11-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/12/image-11-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/12/image-11-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/12/image-11.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure></div>


<h2>スタイルシートを調整しよう</h2>



<p>Svelteでは、スタイルシートも<code>.svelte</code>ファイルに書き込み事ができます。一番下に追加しましょう。</p>



<pre class="wp-block-code"><code>...
&lt;style&gt;
    @media (min-width: 640px) {
        .layout {
            display: grid;
            gap: 2em;
            grid-template-columns: 1fr 16em;
        }
    }
&lt;/style&gt;</code></pre>



<p>これで、サイドエリアに移動しました。</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/12/image-12-1024x576.png" alt="" class="wp-image-22661" srcset="https://tomosta.jp/wp-content/uploads/2022/12/image-12-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/12/image-12-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/12/image-12-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/12/image-12-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/12/image-12.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure></div>


<p>＜以下、執筆中＞</p>
]]></content:encoded>
					
					<wfw:commentRss>https://tomosta.jp/2022/12/sveltekit/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
		<post-id xmlns="com-wordpress:feed-additions:1">22635</post-id>	</item>
		<item>
		<title>Figmaのグループ化、結合・統合とコンポーネントの違いを知ろう</title>
		<link>https://tomosta.jp/2022/11/figma-group/</link>
					<comments>https://tomosta.jp/2022/11/figma-group/#respond</comments>
		
		<dc:creator><![CDATA[たにぐち　まこと]]></dc:creator>
		<pubDate>Wed, 30 Nov 2022 04:39:44 +0000</pubDate>
				<category><![CDATA[ブログ]]></category>
		<category><![CDATA[Figma]]></category>
		<guid isPermaLink="false">https://tomosta.jp/?p=22573</guid>

					<description><![CDATA[Figmaで複数のシェイプをまとめるときに使う「グループ化」「結合」「統合」と「コンポーネント化」について紹介します]]></description>
										<content:encoded><![CDATA[
<figure class="wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio"><div class="wp-block-embed__wrapper">
<iframe loading="lazy" title="Figmaのグループ化、結合・統合とコンポーネントの違いを知ろう" width="500" height="281" src="https://www.youtube.com/embed/AAoIgOng0i4?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>
</div></figure>



<p>Figmaでは、長方形や楕円などの「シェイプ」を組み合わせて、1つのオブジェクトとして扱うことができます。こうすることで、移動や変形などをやりやすくしたり、管理しやすくなります。</p>



<p>この時Figmaには「グループ化」と「結合」、「統合」、そして「コンポーネント化」という方法があります。それぞれの違いについて紹介しましょう。</p>



<h2>最も手軽なグループ化</h2>



<p>複数のシェイプをまとめる方法で、一番手軽なのが「グループ化」です。一時的にまとめておきたいときや、単純に複数のシェイプをまとめたい場合に使います。グループ化をする場合は、複数のシェイプを選択したら、メインメニューの「オブジェクト→選択範囲をグループ化」メニューをクリックします。</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/11/image-88-1024x576.png" alt="" class="wp-image-22594" srcset="https://tomosta.jp/wp-content/uploads/2022/11/image-88-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/11/image-88-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/11/image-88-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/11/image-88-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/11/image-88.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure></div>


<p>これで、1つのオブジェクトとして移動やサイズの変更などが行えます。レイヤーパネルをみると「Group 1」などと表示され、左側の<img src="https://s.w.org/images/core/emoji/14.0.0/72x72/25b6.png" alt="▶" class="wp-smiley" style="height: 1em; max-height: 1em;" />をクリックすることで、中のシェイプをみたり編集することができます。また、オブジェクトをダブルクリックしても、各シェイプを編集することができ、グループ化したまま調整をすることもできます。</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/11/image-89-1024x576.png" alt="" class="wp-image-22595" srcset="https://tomosta.jp/wp-content/uploads/2022/11/image-89-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/11/image-89-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/11/image-89-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/11/image-89-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/11/image-89.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure></div>


<p>そして、後からグループ化をやめたい場合は、同じメインメニューの「オブジェクト→選択範囲のグループ解除」メニューを選べば、簡単に解除することができます。こうして、どんどん関連したシェイプをまとめることができます。</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/11/image-90-1024x576.png" alt="" class="wp-image-22596" srcset="https://tomosta.jp/wp-content/uploads/2022/11/image-90-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/11/image-90-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/11/image-90-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/11/image-90-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/11/image-90.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure></div>


<h2>面白い効果を作れる結合</h2>



<p>グループ化と似たまとめ方に「結合」があります。同じく複数のシェイプを選択したら、メインメニューから「オブジェクト→ブーリアングループ→選択範囲の結合」をクリックしましょう。グループ化と同じように、1つのオブジェクトにする事ができます。</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/11/image-91-1024x576.png" alt="" class="wp-image-22597" srcset="https://tomosta.jp/wp-content/uploads/2022/11/image-91-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/11/image-91-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/11/image-91-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/11/image-91-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/11/image-91.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure></div>


<p>レイヤーパネルでは「Union 1」などと表示されますが、中のシェイプはグループ化と同様に編集することができます。</p>



<p>ただし、グループ化と違って結合したオブジェクトは、それ自身が1つのシェイプとして扱われます。そのため、「塗り」や「線」の設定も1つしか保持できず、別々の設定をしているシェイプ同士を結合すると、統一されてしまいます。</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/11/image-92-1024x576.png" alt="" class="wp-image-22599" srcset="https://tomosta.jp/wp-content/uploads/2022/11/image-92-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/11/image-92-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/11/image-92-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/11/image-92-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/11/image-92.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure></div>


<p>また、結合したオブジェクトに「線」を引いてみるとグループ化の違いが分かります。グループ化の場合は線を引いても、それぞれのシェイプに線が引かれます。しかし、結合をしたオブジェクトに線を引くと、全体の周りにだけ線が引かれます。このように、グループ化とは違った加工が行えるようになります。</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/11/image-93-1024x576.png" alt="" class="wp-image-22600" srcset="https://tomosta.jp/wp-content/uploads/2022/11/image-93-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/11/image-93-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/11/image-93-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/11/image-93-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/11/image-93.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure></div>


<h3>結合の種類</h3>



<p>ブーリアングループには、結合の他にも次のような結合方法があります。</p>



<h3>結合</h3>



<p>2つ以上のシェイプをそのまま組み合わせます</p>



<h3>型抜き</h3>



<p>上に重なったシェイプの形に、下のシェイプが切り抜かれます</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/11/image-94-1024x576.png" alt="" class="wp-image-22602" srcset="https://tomosta.jp/wp-content/uploads/2022/11/image-94-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/11/image-94-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/11/image-94-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/11/image-94-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/11/image-94.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure></div>


<h3>交差</h3>



<p>2つのシェイプが重なっている部分だけが残ったオブジェクトになります</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/11/image-95-1024x576.png" alt="" class="wp-image-22603" srcset="https://tomosta.jp/wp-content/uploads/2022/11/image-95-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/11/image-95-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/11/image-95-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/11/image-95-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/11/image-95.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure></div>


<h3>中窓</h3>



<p>交差の逆で、重なっている場所だけが切り抜かれたオブジェクトになります。</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/11/image-96-1024x576.png" alt="" class="wp-image-22604" srcset="https://tomosta.jp/wp-content/uploads/2022/11/image-96-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/11/image-96-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/11/image-96-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/11/image-96-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/11/image-96.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure></div>


<h2>最終的に行う統合</h2>



<p>統合は、グループ化や結合と違って「解除」をする事ができません。また、レイヤーパネルでも中のシェイプを確認することができなくなります（ただし、ダブルクリックで編集することはできます）。</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/11/image-97-1024x576.png" alt="" class="wp-image-22606" srcset="https://tomosta.jp/wp-content/uploads/2022/11/image-97-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/11/image-97-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/11/image-97-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/11/image-97-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/11/image-97.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure></div>


<p>つまり統合は、グループ化や結合をして編集を行った後、最終的にそれ以上変更をしないといった場合に利用することがあります。とはいえ、実際にはあまり使うメリットはなさそうなので、使う機会はまれかと思います（筆者の知らないメリットがありましたらコメント欄で教えてください）。</p>



<h2>再利用可能なパーツを作成できるコンポーネント</h2>



<p>コンポーネントは、単に複数のシェイプをまとめるだけではなく、作成したオブジェクトを再利用可能なパーツにする事ができる、非常に高機能な概念です。</p>



<p>複数のシェイプを選択したら、メインメニューで「オブジェクト→コンポーネントの作成」をクリックしましょう。</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/11/image-98-1024x576.png" alt="" class="wp-image-22607" srcset="https://tomosta.jp/wp-content/uploads/2022/11/image-98-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/11/image-98-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/11/image-98-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/11/image-98-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/11/image-98.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure></div>


<p>基本的にはグループ化と同様に管理することができます。しかし、選択時の線の色やレイヤーパネル内での色などが他と変わる事が分かります。また、「アセット」パネルに作成したコンポーネントが表示されます。</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/11/image-99-1024x576.png" alt="" class="wp-image-22609" srcset="https://tomosta.jp/wp-content/uploads/2022/11/image-99-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/11/image-99-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/11/image-99-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/11/image-99-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/11/image-99.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure></div>


<p>コンポーネントは他のグループ化したオブジェクトなどと同様に、複製する事ができます。しかし、レイヤーパネルでの見た目などが異なっています。この状態で、最初に作成したコンポーネント（これをメインコンポーネントと言います）を編集してみましょう。</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/11/image-100-1024x576.png" alt="" class="wp-image-22610" srcset="https://tomosta.jp/wp-content/uploads/2022/11/image-100-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/11/image-100-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/11/image-100-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/11/image-100-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/11/image-100.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure></div>


<p>それに合わせて、複製したものも変化するようになります。</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/11/image-101-1024x576.png" alt="" class="wp-image-22612" srcset="https://tomosta.jp/wp-content/uploads/2022/11/image-101-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/11/image-101-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/11/image-101-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/11/image-101-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/11/image-101.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure></div>


<p>コンポーネントは、メインコンポーネントから派生したオブジェクト（これを、インスタンスといいます）は、メインコンポーネントで変更された内容を反映するようになります。これによって、例えば画面全体で利用するボタンなどのパーツをコンポーネントにすることで、全体の見た目の統一を保ったまま編集できるという訳です。コンポーネントについては、これ以外にもさまざまな使い方があるので、別の記事で改めて紹介しましょう。</p>
]]></content:encoded>
					
					<wfw:commentRss>https://tomosta.jp/2022/11/figma-group/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
		<post-id xmlns="com-wordpress:feed-additions:1">22573</post-id>	</item>
		<item>
		<title>PHPのFileinfo（finfo）で、ファイルの種類を表示しよう</title>
		<link>https://tomosta.jp/2022/11/php%e3%81%aefileinfo%ef%bc%88finfo%ef%bc%89%e3%81%a7%e3%80%81%e3%83%95%e3%82%a1%e3%82%a4%e3%83%ab%e3%81%ae%e7%a8%ae%e9%a1%9e%e3%82%92%e8%a1%a8%e7%a4%ba%e3%81%97%e3%82%88%e3%81%86/</link>
					<comments>https://tomosta.jp/2022/11/php%e3%81%aefileinfo%ef%bc%88finfo%ef%bc%89%e3%81%a7%e3%80%81%e3%83%95%e3%82%a1%e3%82%a4%e3%83%ab%e3%81%ae%e7%a8%ae%e9%a1%9e%e3%82%92%e8%a1%a8%e7%a4%ba%e3%81%97%e3%82%88%e3%81%86/#respond</comments>
		
		<dc:creator><![CDATA[たにぐち　まこと]]></dc:creator>
		<pubDate>Tue, 22 Nov 2022 05:20:07 +0000</pubDate>
				<category><![CDATA[ブログ]]></category>
		<category><![CDATA[PHP]]></category>
		<guid isPermaLink="false">https://tomosta.jp/?p=22435</guid>

					<description><![CDATA[PHPでファイルをアップロードしたときに、その種類を知ることができるFileinfoファンクションを紹介します。]]></description>
										<content:encoded><![CDATA[
<p>例えば、ユーザーが画像をアップロードできるサービスを作成する場合、本当にユーザーがアップロードしたファイルが画像であることを確認してからなければ、画面に表示できないばかりか、コンピューターウィルスを仕込まれたりなどの危険性があります。</p>



<p>PHPでは、ファイルのアップロード自体は次の方法でできます。まずは、フォームを準備して<code>type</code>属性が<code>file</code>になっているエリアを準備します。</p>



<pre class="wp-block-code"><code>&lt;form action="" method="post" enctype="multipart/form-data"&gt;
    &lt;input type="file" name="myまたはfile"&gt;
    &lt;button type="submit"&gt;送信する&lt;/button&gt;
&lt;/form&gt;</code></pre>



<p>またこの時、<code>form</code>タグに<code>enctype="multipart/form-data"</code>属性を追加する必要があります。これで、ファイルを送信できます。</p>



<h2>$_FILESのtypeは信用しない</h2>



<p>この時、PHPは<code>$_FILES</code>というグローバル変数にアップロードされたファイルが格納され、次のような要素の配列で各要素を取得できます。</p>



<ul>
<li>name: ファイル名</li>



<li>type: ファイルの種類（MIMEタイプ）</li>



<li>size: ファイルのサイズ</li>



<li>tmp_name: 一時的に保存されている場所のパス</li>



<li>full_path: ファイルパス</li>
</ul>



<p>となり、この中に<code>type</code>という値があるため、これでファイルの種類を知ることができます。しかし、この値は信用することができません。Webブラウザーから渡された値であるため、偽装されている可能性がゼロとはいえないのです。</p>



<p>そこで、実際にアップロードされたファイルを使って、改めてファイルタイプやファイルサイズを取得するとよいでしょう。</p>



<h2>mime_content_typeファンクションは非推奨？</h2>



<p>ファイルの種類のことを「MIMEタイプ（マイムタイプ）」といい、PHPでこのMIMEタイプを取得する場合、<code>mime_content_type</code>というファンクションがあります。</p>



<p>しかし、2022年現在ではこのファンクションは使いにくいファンクションです。一時期は「非推奨」という扱いになり、廃止が検討されていたり、また現在でも標準では利用できずに「php.ini」という設定ファイルを編集しなければ使えない環境などもあります。</p>



<p>そこで、代わりに使いたいのは<code>Fileinfo</code>ファンクション、またそれをクラス化しか<code>finfo</code>というクラスです。ここでは、<code>finfo</code>を利用しましょう。</p>



<h2>finfoクラスが利用できるか確認しよう</h2>



<p>PHPの設定によっては、finfoクラスが使えずに次のようなエラーメッセージが表示されることがあります。</p>



<blockquote class="wp-block-quote">
<p>Uncaught Error: Class &#8220;finfo&#8221; not found in</p>
</blockquote>



<p>この場合は、<code>php.ini</code>に次のように書き加えましょう。</p>



<pre class="wp-block-code"><code>extension=php_fileinfo.dll</code></pre>



<p>こうしてサーバーを再起動すれば利用できるようになります。</p>



<h2>finfoクラスとは</h2>



<p>finfoクラスは、PHP5.3から利用できるようになったクラスで、fileinfoファンクションのインタフェースというものです。これは、PHPでオブジェクト指向のプログラミングができるように、旧来のファンクションをクラスにしたもので、PHPにはこのようなクラスがいくつかあります。</p>



<p>これを使うには、まずは次のように宣言します。</p>



<pre class="wp-block-code"><code>$finfo    = new finfo();</code></pre>



<p>そしたら、<code>file</code>メソッドで各情報を取得できます。</p>



<pre class="wp-block-code"><code>$finfo = new finfo();
$mimetype = $finfo-&gt;file( $path, FILEINFO_MIME_TYPE );
echo $mimetype; // image/jpeg など</code></pre>



<p>これで、ファイルのMIMEタイプを取得できます。例えば、JPEG画像の場合は「image/jpeg」などと表示されます。これを利用しましょう。</p>



<p>ちなみに、ファイルサイズも<code>$_FILES</code>の値を利用せずに、<code>filesize</code>ファンクションを利用して、実際にサイズを取得するとよいでしょう。</p>



<pre class="wp-block-code"><code>$filesize = filesize( $path );
echo $filesize;</code></pre>
]]></content:encoded>
					
					<wfw:commentRss>https://tomosta.jp/2022/11/php%e3%81%aefileinfo%ef%bc%88finfo%ef%bc%89%e3%81%a7%e3%80%81%e3%83%95%e3%82%a1%e3%82%a4%e3%83%ab%e3%81%ae%e7%a8%ae%e9%a1%9e%e3%82%92%e8%a1%a8%e7%a4%ba%e3%81%97%e3%82%88%e3%81%86/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
		<post-id xmlns="com-wordpress:feed-additions:1">22435</post-id>	</item>
		<item>
		<title>Udemyで販売中の『ちゃんと学ぶ、Adobe XD』にFigmaカリキュラムを追加しました</title>
		<link>https://tomosta.jp/2022/11/udemy%e3%81%a7%e8%b2%a9%e5%a3%b2%e4%b8%ad%e3%81%ae%e3%80%8e%e3%81%a1%e3%82%83%e3%82%93%e3%81%a8%e5%ad%a6%e3%81%b6%e3%80%81adobe-xd%e3%80%8f%e3%81%abfigma%e3%82%ab%e3%83%aa%e3%82%ad%e3%83%a5%e3%83%a9/</link>
					<comments>https://tomosta.jp/2022/11/udemy%e3%81%a7%e8%b2%a9%e5%a3%b2%e4%b8%ad%e3%81%ae%e3%80%8e%e3%81%a1%e3%82%83%e3%82%93%e3%81%a8%e5%ad%a6%e3%81%b6%e3%80%81adobe-xd%e3%80%8f%e3%81%abfigma%e3%82%ab%e3%83%aa%e3%82%ad%e3%83%a5%e3%83%a9/#respond</comments>
		
		<dc:creator><![CDATA[たにぐち　まこと]]></dc:creator>
		<pubDate>Mon, 14 Nov 2022 12:18:39 +0000</pubDate>
				<category><![CDATA[お知らせ]]></category>
		<category><![CDATA[Udemy]]></category>
		<guid isPermaLink="false">https://tomosta.jp/?p=22392</guid>

					<description><![CDATA[Udemyで販売中の『ちゃんと学ぶ、Adobe XD』に Figmaのカリキュラムを追加し、講座名を『ちゃんと学ぶ、Figma &#038; Adobe XD』に改めました]]></description>
										<content:encoded><![CDATA[
<p>Udemyで Adobe XD講座を先日リリースしたのですが、その講座の収録中に Figmaが買収されるというショッキングな出来事がありました。（笑</p>



<p>そこで、なんとその XD講座に Figmaの講座を「追加」して「ちゃんと学ぶ、Figma &amp; Adobe XD」に改めました。すでに購入頂いていた皆様は、追加費用なしでFigmaも学んで頂けます。全部で6時間を超える講座になりました。</p>



<p>11/18まで有効の最安値クーポンをご利用頂き、ぜひこの機会にご受講頂ければ幸いです。</p>



<ul>
<li><a rel="noreferrer noopener" href="https://www.udemy.com/course/chanto-xd/?couponCode=ADD-FIGMA" data-type="URL" data-id="https://www.udemy.com/course/chanto-xd/?couponCode=ADD-FIGMA" target="_blank">ちゃんと学ぶ、Figma &amp; Adobe XD</a>＜最安値クーポン＞</li>
</ul>
]]></content:encoded>
					
					<wfw:commentRss>https://tomosta.jp/2022/11/udemy%e3%81%a7%e8%b2%a9%e5%a3%b2%e4%b8%ad%e3%81%ae%e3%80%8e%e3%81%a1%e3%82%83%e3%82%93%e3%81%a8%e5%ad%a6%e3%81%b6%e3%80%81adobe-xd%e3%80%8f%e3%81%abfigma%e3%82%ab%e3%83%aa%e3%82%ad%e3%83%a5%e3%83%a9/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
		<post-id xmlns="com-wordpress:feed-additions:1">22392</post-id>	</item>
		<item>
		<title>Udemyで『ざっくり学ぶ、WordPress 6.xでノーコードサイト制作講座』を発売しました</title>
		<link>https://tomosta.jp/2022/07/udemy%e3%81%a7%e3%80%8e%e3%81%96%e3%81%a3%e3%81%8f%e3%82%8a%e5%ad%a6%e3%81%b6%e3%80%81wordpress-6-x%e3%81%a7%e3%83%8e%e3%83%bc%e3%82%b3%e3%83%bc%e3%83%89%e3%82%b5%e3%82%a4%e3%83%88%e5%88%b6%e4%bd%9c/</link>
					<comments>https://tomosta.jp/2022/07/udemy%e3%81%a7%e3%80%8e%e3%81%96%e3%81%a3%e3%81%8f%e3%82%8a%e5%ad%a6%e3%81%b6%e3%80%81wordpress-6-x%e3%81%a7%e3%83%8e%e3%83%bc%e3%82%b3%e3%83%bc%e3%83%89%e3%82%b5%e3%82%a4%e3%83%88%e5%88%b6%e4%bd%9c/#respond</comments>
		
		<dc:creator><![CDATA[たにぐち　まこと]]></dc:creator>
		<pubDate>Sat, 16 Jul 2022 14:07:43 +0000</pubDate>
				<category><![CDATA[お知らせ]]></category>
		<category><![CDATA[Udemy]]></category>
		<guid isPermaLink="false">https://tomosta.jp/?p=22239</guid>

					<description><![CDATA[Udemyで新講座、『ざっくり学ぶ、WordPress 6.xでノーコードサイト制作講座』を発売いたしました。]]></description>
										<content:encoded><![CDATA[
<figure class="wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio"><div class="wp-block-embed__wrapper">
<iframe loading="lazy" title="[お知らせ] Udemyで新講座『ざっくり学ぶ、WordPress 6.xでノーコードサイト制作講座』をリリースしました" width="500" height="281" src="https://www.youtube.com/embed/5ALDCNnJFhk?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>
</div></figure>



<p>Udemyで新講座、『ざっくり学ぶ、WordPress 6.xでノーコードサイト制作講座』を発売いたしました。</p>



<p>この講座は、WordPressの最新バージョン6.0以降で一般的になっているFSE（フルサイト編集）機能のみを用いて、ウェブサイトを制作する方法を紹介しています。</p>



<p>従来のWordPressでは、HTML/CSSとPHPを利用してオリジナルのテーマを開発して、ウェブサイトを制作するのが一般的でした。しかし、FSE機能を使えば管理画面上でデザインのカスタマイズが容易に行え、オリジナルのテンプレートやデザインなども、管理画面上からカスタマイズできます。</p>



<p>本講座は、WordPressの操作方法の基本からカスタマイズ方法、またロリポップを使ったウェブサーバーへの公開方法や、公開後に気をつけたいセキュリティ面、SEO対策面等についても紹介しています。</p>



<p>4時間の講座となっていますので、手早く学んで頂けます。ご興味があれば、ぜひご受講頂けると幸いです。</p>



<ul><li><a rel="noreferrer noopener" href="https://www.udemy.com/course/wordpress-nocode/?referralCode=23E7D591C16FFCCF5B30" target="_blank">ざっくり学ぶ、WordPress 6.xでノーコードサイト制作講座</a></li></ul>



<p>なお、YouTubeのメンバーシップ（月額990円）をご契約の方はYouTubeでこちらの講座を受講して頂けます。過去の講座なども含めて受講し放題となっていますので、こちらもご利用頂ければ幸いです。</p>



<ul><li><a href="https://www.youtube.com/channel/UCphTq6mefx_15CjD35qgXgA/join" target="_blank" rel="noreferrer noopener">メンバーシップへの登録</a></li><li><a href="https://www.youtube.com/playlist?list=UUMOphTq6mefx_15CjD35qgXgA" target="_blank" rel="noreferrer noopener">メンバー限定動画の一覧へ</a></li></ul>
]]></content:encoded>
					
					<wfw:commentRss>https://tomosta.jp/2022/07/udemy%e3%81%a7%e3%80%8e%e3%81%96%e3%81%a3%e3%81%8f%e3%82%8a%e5%ad%a6%e3%81%b6%e3%80%81wordpress-6-x%e3%81%a7%e3%83%8e%e3%83%bc%e3%82%b3%e3%83%bc%e3%83%89%e3%82%b5%e3%82%a4%e3%83%88%e5%88%b6%e4%bd%9c/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
		<post-id xmlns="com-wordpress:feed-additions:1">22239</post-id>	</item>
		<item>
		<title>Vue 3 Composition API入門</title>
		<link>https://tomosta.jp/2022/06/vue3-begin/</link>
					<comments>https://tomosta.jp/2022/06/vue3-begin/#respond</comments>
		
		<dc:creator><![CDATA[たにぐち　まこと]]></dc:creator>
		<pubDate>Tue, 28 Jun 2022 14:14:13 +0000</pubDate>
				<category><![CDATA[入門講座]]></category>
		<category><![CDATA[Vue 3 Composition API 入門]]></category>
		<guid isPermaLink="false">https://tomosta.jp/?p=22056</guid>

					<description><![CDATA[Vue.jsは、最新版の3から「Composition API」という新しい開発スタイルが提供されるようになりました。

Vue 2以前の作り方との比較を含めながら、Vueが初めてという方にも分かりやすく紹介していきます。]]></description>
										<content:encoded><![CDATA[
<p>Vue.jsは、JavaScriptライブラリとしてReactと共に人気のあるライブラリです。特に2021年に登場した最新の「Vue 3」からは「Composition API」という新しい開発手法が登場しました。</p>



<p>これは、それまでのVue.jsの開発手法（これをOptions APIといいます）では、かなり独特だったプログラムの書き方が、かなりJavaScript標準の書き方に近づいたもので、Vue.jsに馴染めなかった人でも、すんなり導入できるスタイルに変化しました。</p>



<p>本記事では、そんなComposition APIを利用したVue 3の開発手法を紹介しながら、簡単なToDoツールを開発していきましょう。</p>



<figure class="wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio"><div class="wp-block-embed__wrapper">
<iframe loading="lazy" title="Vue 3のプロジェクトを作成しよう 【Vue 3 Composition API入門】" width="500" height="281" src="https://www.youtube.com/embed/BqqGEIdUkeI?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>
</div></figure>



<h2>Vue 3のプロジェクトを作成しよう</h2>



<h3>npmを利用しよう</h3>



<p>Vue 3は、HTMLファイルに後から組み込むこともできますが、npmを利用してプロジェクトを作成することもできます。今回は、この方法を利用するためnpmの環境を整えましょう。<a href="https://nodejs.org/ja/" target="_blank" rel="noreferrer noopener">Node.js</a>をインストールします。</p>



<p>インストールが終わったら、ターミナル（Windowsの場合は、Microsoft TerminalまたはPowershell）を起動して、以下のコマンドを入力します。</p>



<pre class="wp-block-code"><code>node -v</code></pre>



<p>これで、図のようにバージョン番号が表示されていれば、正しくインストールされています。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/06/image-16-1024x576.png" alt="" class="wp-image-22064" srcset="https://tomosta.jp/wp-content/uploads/2022/06/image-16-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/06/image-16-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/06/image-16-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/06/image-16-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/06/image-16.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>後は、エディターとして<a href="https://code.visualstudio.com/" target="_blank" rel="noreferrer noopener">Visual Studio Code</a>とウェブブラウザーに<a href="https://www.google.com/intl/ja_jp/chrome/">Google Chrome</a>等を導入しておくと、開発しやすいでしょう。</p>



<h3>プロジェクトを作成しよう</h3>



<p>それでは、Vue 3のプロジェクトを作成しましょう。プロジェクトを作成する場所（ここではDesktop）に移動して、プロジェクトを作成します。</p>



<pre class="wp-block-code"><code>cd Desktop
npm init vue@lates</code></pre>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/06/image-17-1024x576.png" alt="" class="wp-image-22067" srcset="https://tomosta.jp/wp-content/uploads/2022/06/image-17-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/06/image-17-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/06/image-17-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/06/image-17-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/06/image-17.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>すると、次のようなものをあわせてインストールするかを聞かれます。ここでは、すべて「No」を選ぶと良いでしょう。プロジェクト名はてきとうなものを入力していきます。</p>



<ul>
<li>TypeScript &#8211; JavaScriptの上位互換言語</li>



<li>JSX &#8211; HTMLをJavaScript内で利用できる</li>



<li>Vue Router &#8211; ページ遷移のサポート</li>



<li>Pinia &#8211; 「状態管理」と呼ばれるデータの保管などに使われる</li>



<li>Vitest &#8211; テストフレームワーク</li>



<li>Cypress &#8211; 同上</li>



<li>ESLint &#8211; コードの検査などを行う</li>
</ul>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/06/image-18-1024x576.png" alt="" class="wp-image-22070" srcset="https://tomosta.jp/wp-content/uploads/2022/06/image-18-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/06/image-18-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/06/image-18-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/06/image-18-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/06/image-18.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p></p>



<p>こうしてコマンドを実行すると、各種ファイル群がダウンロードされます。ここで作成したフォルダーを、Visual Studio Code（VSCode）で開いておきましょう。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/06/image-19-1024x576.png" alt="" class="wp-image-22072" srcset="https://tomosta.jp/wp-content/uploads/2022/06/image-19-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/06/image-19-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/06/image-19-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/06/image-19-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/06/image-19.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h3>開発サーバーを起動しよう</h3>



<p>Vue 3のプロジェクトには、簡易的なウェブサーバーが同梱されていて、これを起動しながら開発ができます。VSCodeで「ターミナル→新しいターミナル」メニューでターミナルを起動したら、次のコマンドを打ち込みましょう。</p>



<pre class="wp-block-code"><code>npm install
npm run dev</code></pre>



<p>アドレスが表示されれば、起動完了です。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/06/image-20-1024x576.png" alt="" class="wp-image-22075" srcset="https://tomosta.jp/wp-content/uploads/2022/06/image-20-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/06/image-20-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/06/image-20-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/06/image-20-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/06/image-20.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>ここで表示されているアドレスをブラウザーで開いてみましょう。次の画面が表示されます。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/06/image-21-1024x576.png" alt="" class="wp-image-22076" srcset="https://tomosta.jp/wp-content/uploads/2022/06/image-21-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/06/image-21-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/06/image-21-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/06/image-21-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/06/image-21.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h3>ファイルを変更してみよう</h3>



<p>それでは、作られたファイル群を確認していきましょう。次のようなフォルダーやファイルが生成されています。</p>



<ul>
<li>node_modules &#8211; Node.jsのモジュール群がインストールされます</li>



<li>public &#8211; 画像ファイルなどのリソースファイルが格納されます</li>



<li>src &#8211; ソースファイルが格納されます</li>



<li>src/assets &#8211; CSSや画像ファイルなど、ソース内で使われるリソースファイルが格納されます</li>



<li>src/components &#8211; コンポーネント（後述）が格納されます</li>



<li>src/App.vue &#8211; プロジェクトのメインとなるファイル</li>



<li>src/main.js &#8211; メインとなるJavaScriptファイル</li>



<li>index.html &#8211; ブラウザーに読み込まれる最初のHTMLファイル</li>
</ul>



<p>この他、環境設定ファイルなどがありますが、基本的には「src」フォルダー内のファイルを編集していきます。</p>



<p>ここでは、App.vueを編集してみましょう。11行目付近に「You did it!」というメッセージが記述されています。これは、ブラウザーに表示される画面の左側に表示されるメッセージです。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/06/image-22-1024x576.png" alt="" class="wp-image-22081" srcset="https://tomosta.jp/wp-content/uploads/2022/06/image-22-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/06/image-22-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/06/image-22-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/06/image-22-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/06/image-22.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>これを、「ともすた」等に書き換えてみましょう。ファイルを保存すると、ブラウザーもすぐに変化します。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/06/image-23-1024x576.png" alt="" class="wp-image-22083" srcset="https://tomosta.jp/wp-content/uploads/2022/06/image-23-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/06/image-23-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/06/image-23-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/06/image-23-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/06/image-23.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>これは、開発サーバーがファイルの変更を監視していて、必要に応じて再読込などするためです。</p>



<h3>ビルドしよう</h3>



<p>こうして、.vueという拡張子のファイルを編集していくことでプログラムを作成するのですが、これらのファイル群はそのままではウェブサーバーで公開することはできません。プロジェクトが完成した「ビルド」という作業が必要になります。</p>



<p>まずは、開発サーバーを終了しましょう。ターミナル上で「Ctrl+C」を押します。代わりに、次のコマンドを打ち込みます。</p>



<pre class="wp-block-code"><code>npm run build</code></pre>



<p>すると、「dist」というフォルダーが自動的に増えます。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/06/image-24-1024x576.png" alt="" class="wp-image-22087" srcset="https://tomosta.jp/wp-content/uploads/2022/06/image-24-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/06/image-24-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/06/image-24-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/06/image-24-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/06/image-24.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>ここに、HTMLやJavaScript等のファイルが生成されるため、これをウェブサーバーに転送して公開できます。</p>



<p>開発するときには、改めて開発サーバーを起動しておきましょう。</p>



<pre class="wp-block-code"><code>npm run dev</code></pre>



<h2>Vueの新しい開発手法 Composition API</h2>



<p>Vue 3では、従来のプログラムスタイルでも開発ができますが、新しくよりJavaScriptらしい開発スタイルでプログラミングができるようになりました。これを、「Composition API」といいます。（従来の開発スタイルをOptions APIといいます）</p>



<p>ここでは、そんなComposition APIを利用した開発を大変してみましょう。</p>



<figure class="wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio"><div class="wp-block-embed__wrapper">
<iframe loading="lazy" title="Vueの新しい開発手法 Composition API 【Vue 3 Composition API入門】" width="500" height="281" src="https://www.youtube.com/embed/N5JJMgQYLAU?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>
</div></figure>



<h3>templateを準備しよう</h3>



<p>まずは、<a href="https://tomosta.jp/2022/06/vue3-begin-01/" data-type="post" data-id="22056">前回の記事</a>を参考にVueのプロジェクトを作成してください。</p>



<p>最初に画面には「src」フォルダーの「App.vue」ファイルが表示されます。今はサンプルのプログラムが書き込まれているので、一度これをすべて削除してしまいましょう。ブラウザー上の表示も真っ白の画面に変わります。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/07/image-1024x576.png" alt="" class="wp-image-22115" srcset="https://tomosta.jp/wp-content/uploads/2022/07/image-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/07/image-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/07/image-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/07/image-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/07/image.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>.vueファイルにはHTMLを記述できますが、その際に前後を<code>&lt;template&gt;</code>タグで囲む必要があります。この中に、HTMLを記述していきましょう。</p>



<pre class="wp-block-code"><code>&lt;template&gt;
  &lt;h1&gt;Vue 3&lt;/h1&gt;
&lt;/template&gt;</code></pre>



<p>これでファイルを保存すると、ブラウザーの表示内容も変化します。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/07/image-1-1024x576.png" alt="" class="wp-image-22118" srcset="https://tomosta.jp/wp-content/uploads/2022/07/image-1-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/07/image-1-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/07/image-1-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/07/image-1-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/07/image-1.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h3>Options APIでの書き方</h3>



<p>ではまずは、Options APIを復習しておきましょう。例えば、<code>&lt;template&gt;</code>内に</p>



<pre class="wp-block-code"><code>&lt;p&gt;1 + 1 = &lt;/p&gt;</code></pre>



<p>と記述し、この最後に足し算の答えを表示してみましょう。Options APIの場合は、次のようにファイルの最後に追加します。</p>



<pre class="wp-block-code"><code>&lt;script&gt;
export default {
  data() {
    return {
      answer: 2
    }
  }
}
&lt;/script&gt;</code></pre>



<p>Options APIでは「data」という定義の中で、HTML内で利用したい内容を扱うことができます。表示するには、<code>&lt;template&gt;</code>内に、次のように「マスタッシュ構文」を記述します。</p>



<pre class="wp-block-code"><code>&lt;p&gt;1 + 1 = {{ answer }}&lt;/p&gt;</code></pre>



<p>これで、画面に結果が反映されます。</p>



<p>マスタッシュ構文とは「{{」という記号で、扱いたいデータの名前などを記述するもので、これによって画面に「answer」の内容である「2」が表示されるようになります。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/07/image-2-1024x576.png" alt="" class="wp-image-22122" srcset="https://tomosta.jp/wp-content/uploads/2022/07/image-2-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/07/image-2-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/07/image-2-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/07/image-2-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/07/image-2.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>従来のVueはこのような開発スタイルで開発してのですが、書き方がかなり独特で習得に手間がかかっていました。そこで、Composition APIというより素直な書き方が採用されました。今作成した<code>&lt;script&gt;</code>タグは削除しましょう。</p>



<h3>Composition APIで記述しよう</h3>



<p>今度は、ファイルの先頭に次のように追加しましょう。</p>



<pre class="wp-block-code"><code>&lt;script setup&gt;
const answer = 2
&lt;/script&gt;</code></pre>



<p>これで、先ほどのマスタッシュ構文が正しく機能して、次のように画面に表示されます。（なお、実際にはこの記述では少し足りない部分がありますが、それについては後述します）</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/07/image-3-1024x576.png" alt="" class="wp-image-22125" srcset="https://tomosta.jp/wp-content/uploads/2022/07/image-3-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/07/image-3-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/07/image-3-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/07/image-3-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/07/image-3.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p><code>&lt;script&gt;</code>タグに「setup」という属性が必要になるので気をつけてください。</p>



<p>Composition APIの場合、実際のプログラムはECMAScriptの定数の宣言と同様です。「const」宣言の後に利用したい定数名とその値を設定するだけで、マスタッシュ構文で使うことができます。</p>



<h3>computedで計算しよう</h3>



<p>現状では、「answer」には直接「2」が代入されているため、これではプログラムを作って意味がありません。ここは、実際に「1+1」の計算をして、その結果を画面に表示してみましょう。Vueで計算式などを作る場合は<code>computed</code>構文を利用します。次のように変更しましょう。</p>



<pre class="wp-block-code"><code>&lt;script setup&gt;
import { computed } from 'vue'

const answer = computed(() =&gt; {
  return 1 + 1
})
&lt;/script&gt;</code></pre>



<p>これで画面には、「2」と表示されます。試しに別の計算式を入れてもきちんと計算してくれるのが分かります。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/07/image-4-1024x576.png" alt="" class="wp-image-22130" srcset="https://tomosta.jp/wp-content/uploads/2022/07/image-4-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/07/image-4-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/07/image-4-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/07/image-4-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/07/image-4.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>ここでは<code>computed</code>を利用しましたが、JavaScriptではこのように他で定義されたものを使うときに「モジュール」というものをインポートして利用することがよくあります。この書き方も覚えておきましょう。</p>



<h3>HTMLを表示しよう</h3>



<p>Vueで定義した定数は、安全性のためにそのままではHTMLなどを画面に表示することはできません。例えば、次のプログラムを作成してみましょう。</p>



<pre class="wp-block-code"><code>&lt;script setup&gt;
...
const message = 'ようこそ &lt;strong&gt;ともすた&lt;/strong&gt;さん'
&lt;/script&gt;

&lt;template&gt;
...
&lt;p&gt;{{ message }}&lt;/p&gt;
&lt;/template&gt;</code></pre>



<p>この場合、次のようにHTMLタグがそのまま表示されてしまいます。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/07/image-5-1024x576.png" alt="" class="wp-image-22132" srcset="https://tomosta.jp/wp-content/uploads/2022/07/image-5-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/07/image-5-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/07/image-5-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/07/image-5-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/07/image-5.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>これを防ぐには、マスタッシュ構文を使わずに<code>v-html</code>という属性のようなものを利用して、次のように変更します。</p>



<pre class="wp-block-code"><code>&lt;p v-html="message"&gt;&lt;/p&gt;</code></pre>



<p>これで、HTMLを展開して表示できるようになります。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/07/image-6-1024x576.png" alt="" class="wp-image-22134" srcset="https://tomosta.jp/wp-content/uploads/2022/07/image-6-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/07/image-6-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/07/image-6-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/07/image-6-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/07/image-6.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>この<code>v-</code>から始まるHTML属性のようなものを「ディレクティブ」といい、VueがHTMLを制御する時によく利用します。なお、マスタッシュ構文も実は<code>v-text</code>というディレクティブでも同じように動作します。</p>



<pre class="wp-block-code"><code>&lt;p v-text="message"&gt;&lt;/p&gt;</code></pre>



<p>この場合は、HTMLタグがそのまま表示されます。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/07/image-7-1024x576.png" alt="" class="wp-image-22136" srcset="https://tomosta.jp/wp-content/uploads/2022/07/image-7-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/07/image-7-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/07/image-7-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/07/image-7-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/07/image-7.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h3>v-bindでHTMLのstyle属性を動的に書き換えよう</h3>



<p>例えば、HTMLの<code>style</code>属性の内容をVueで書き換えたいとしましょう。この場合、次のように属性の中にマスタッシュ構文を使うことはできません。</p>



<pre class="wp-block-code"><code>&lt;p v-text="message" style="color: {{ welcomeColor }}"&gt;&lt;/p&gt;</code></pre>



<p>代わりにこの場合は<code>v-bind</code>ディレクティブを利用します。まずは、<code>welcomeColor</code>という色を定義しましょう。</p>



<pre class="wp-block-code"><code>&lt;script setup&gt;
...
const welcomeColor = 'red'
&lt;/script&gt;</code></pre>



<p>そして、<code>style</code>属性は次のように変更します。</p>



<pre class="wp-block-code"><code>&lt;p v-text="message" v-bind:style="{ color: welcomeColor }"&gt;&lt;/p&gt;</code></pre>



<p>これにより、文字の色が<code>welcomeColor</code>で定義した内容に変わります。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/07/image-8-1024x576.png" alt="" class="wp-image-22141" srcset="https://tomosta.jp/wp-content/uploads/2022/07/image-8-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/07/image-8-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/07/image-8-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/07/image-8-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/07/image-8.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p><code>v-bind</code>ディレクティブを利用すると、属性の値に変数を利用できるようになるというわけです。</p>



<h4>ハイフン付のプロパティには注意</h4>



<p>1つ注意が必要なのは、プロパティにハイフン記号が必要な<code>background-color</code>等です。これは、JavaScriptの処理の関係で正しく動作しなくなるため、ハイフンを取り除いて、代わりにその後最初の文字を大文字にする「キャメル式」と呼ばれる記法に変換します。</p>



<pre class="wp-block-code"><code>&lt;p v-text="message" v-bind:style="{ <strong>backgroundColor</strong>: welcomeColor }"&gt;&lt;/p&gt;</code></pre>



<p>または、プロパティ自体をクオーテーション記号で囲むこともできます。複数のプロパティをカンマ区切りで並べたり、値を直接指定することもできます。</p>



<pre class="wp-block-code"><code>&lt;p v-text="message" v-bind:style="{ 'background-color': welcomeColor, 'color': 'white' }"&gt;&lt;/p&gt;</code></pre>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/07/image-9-1024x576.png" alt="" class="wp-image-22146" srcset="https://tomosta.jp/wp-content/uploads/2022/07/image-9-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/07/image-9-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/07/image-9-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/07/image-9-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/07/image-9.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h4>v-bindの省略記法</h4>



<p><code>v-bind</code>ディレクティブは、非常によく利用するため省略記法があります。次のように<code>:</code>を記述するだけで代わりになります。</p>



<pre class="wp-block-code"><code>&lt;p v-text="message" :style="{ 'background-color': welcomeColor, 'color': 'white' }"&gt;&lt;/p&gt;</code></pre>



<h3>フォームなどと連携するv-model</h3>



<p>今度は、テキストフィールドパーツを利用してみましょう。次のように<code>input</code>要素を追加します。</p>



<pre class="wp-block-code"><code>&lt;template&gt;
...
お名前は？： &lt;input type="text" size="30"&gt;
...
&lt;/template&gt;</code></pre>



<p>ここで、入力された名前をVueで扱いたいとしましょう。そこでまずは定数を準備します。</p>



<pre class="wp-block-code"><code>&lt;script setup&gt;
...
const myname = ''
&lt;/script&gt;</code></pre>



<p>これまでは<code>v-html</code>や<code>v-text</code>で連携していましたが、この場合はテキストフィールドに入力した内容を反映する事ができません。テキストフィールドなどと双方向に連携したい場合は<code>v-model</code>を利用します。</p>



<pre class="wp-block-code"><code>お名前は？： &lt;input type="text" size="30" v-model="myname"&gt;</code></pre>



<p>これにより、テキストフィールドに入力した内容が<code>myname</code>に反映され、他の場所で利用できるようになります。</p>



<h4>refで宣言しよう</h4>



<p>その前に、実は今のプログラムでは正しくHTML側とVue側で値のやり取りができません。Vueで定数を宣言する場合は<code>ref</code>という宣言を使う必要があります。次のように変更しましょう。</p>



<pre class="wp-block-code"><code>&lt;script setup&gt;
import { ref } from 'vue'
...
const myname = ref('')
&lt;/script&gt;</code></pre>



<p>これで、双方向に連携ができるようになります。それでは、ここで入力した名前を画面に表示してみましょう。</p>



<pre class="wp-block-code"><code>&lt;p v-html="myname" ...&gt;</code></pre>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/07/image-10-1024x576.png" alt="" class="wp-image-22154" srcset="https://tomosta.jp/wp-content/uploads/2022/07/image-10-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/07/image-10-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/07/image-10-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/07/image-10-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/07/image-10.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h3>メッセージを組み立てよう</h3>



<p>それでは、ここまでのプログラムを組み合わせて、テキストフィールドに入力した名前を使って「ようこそ○○さん」と表示するプログラムを作成してみましょう。それには、<code>message</code>を<code>computed</code>で動的に生成します。</p>



<pre class="wp-block-code"><code>const message = computed(() =&gt; {
  return 'ようこそ &lt;strong&gt;' + myname.value + '&lt;/strong&gt;さん'
})
...
&lt;template&gt;
&lt;p v-html="message" ...&gt;
&lt;/template&gt;</code></pre>



<p>これで完成です。画面には入力した名前が表示されます。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/07/image-11-1024x576.png" alt="" class="wp-image-22157" srcset="https://tomosta.jp/wp-content/uploads/2022/07/image-11-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/07/image-11-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/07/image-11-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/07/image-11-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/07/image-11.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>プログラム内で<code>ref</code>を使って宣言した定数の内容を利用する場合は<code>.value</code>として取得する必要があります。このあたりは、少しJavaScriptとは違った書き方が必要になるので気をつけましょう。</p>



<p>とはいえ、Composition APIでのVueのプログラムの書き方は、かなり素直な書き方に変わっていることが分かります。プログラムを作りやすくなったと言えるでしょう。</p>



<h2>ボタンのクリックに反応するイベント定義</h2>



<p>Vueでのプログラミング開発は、ユーザーがなにかの操作をしたとき（イベントといいます）に、それに反応するプログラムを記述するというのが主になります。これを「イベントドリブン」などといいますが、ここではVueでのイベント定義について紹介しましょう。</p>



<figure class="wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio"><div class="wp-block-embed__wrapper">
<iframe loading="lazy" title="Vue 3 でボタンのクリックに反応するイベント定義 【Vue 3 Composition API入門】" width="500" height="281" src="https://www.youtube.com/embed/8Q66nPQ84CE?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>
</div></figure>



<h3>拡張機能で開発しやすくしよう</h3>



<p>その前に、Vueでの開発を補助する拡張機能をVSCodeとGoogle Chromeにインストールしておきましょう。</p>



<h4>Visual Studio CodeでVue用の拡張機能をインストールしよう</h4>



<p>Visual Studio Code（VSCode）でVueの開発をする際、拡張子が「.vue」だとそのままではJavaScriptやHTMLとして認識してくれません。そこで、拡張機能をインストールして、開発しやすくしましょう。</p>



<p>VSCodeの拡張機能画面で「vue」などのキーワードで検索をします。次のプラグインが見つかりますので、これをインストールしましょう。</p>



<ul>
<li><a href="https://marketplace.visualstudio.com/items?itemName=vue.volar" target="_blank" rel="noreferrer noopener">Vue Language Features(Volar)</a></li>
</ul>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/07/image-12-1024x576.png" alt="" class="wp-image-22165" srcset="https://tomosta.jp/wp-content/uploads/2022/07/image-12-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/07/image-12-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/07/image-12-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/07/image-12-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/07/image-12.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>これで、色分けされるようになりました。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/07/image-13-1024x576.png" alt="" class="wp-image-22167" srcset="https://tomosta.jp/wp-content/uploads/2022/07/image-13-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/07/image-13-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/07/image-13-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/07/image-13-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/07/image-13.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h4>Google ChromeにもVue.js devtoolsをインストールしよう</h4>



<p>今度は、Google ChromeでもVueの開発をしやすくする拡張機能をインストールしておきましょう。</p>



<ul>
<li><a href="https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd?hl=ja" target="_blank" rel="noreferrer noopener">Vue.js devtools</a></li>
</ul>



<p>インストールした後、Vueで開発したページを表示すると、ツールバー上のボタンが緑色になります。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/07/image-14-1024x576.png" alt="" class="wp-image-22170" srcset="https://tomosta.jp/wp-content/uploads/2022/07/image-14-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/07/image-14-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/07/image-14-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/07/image-14-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/07/image-14.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>そして、開発者ツールに「Vue」というタブが増えます。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/07/image-15-1024x576.png" alt="" class="wp-image-22172" srcset="https://tomosta.jp/wp-content/uploads/2022/07/image-15-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/07/image-15-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/07/image-15-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/07/image-15-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/07/image-15.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>ここで、Vueのさまざまな情報を確認でき、開発しやすくなります。</p>



<figure class="wp-block-image size-large is-resized"><img decoding="async" loading="lazy" src="https://tomosta.jp/wp-content/uploads/2022/07/image-16-1024x576.png" alt="" class="wp-image-22173" width="736" height="414" srcset="https://tomosta.jp/wp-content/uploads/2022/07/image-16-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/07/image-16-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/07/image-16-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/07/image-16-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/07/image-16.png 1920w" sizes="(max-width: 736px) 100vw, 736px" /></figure>



<h3>イベント定義をしよう</h3>



<p>それではイベントを定義してみます。新しいファイルを作成していきましょう。前回までのプログラムをすべて削除します。そして、次のように入力してフォームを追加してみましょう。</p>



<pre class="wp-block-code"><code>&lt;template&gt;
  &lt;input type="text" size="30"&gt; &lt;button&gt;+1&lt;/button&gt;
&lt;/template&gt;</code></pre>



<p>すると、画面にはテキストフィールドとボタンが表示されました。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/07/image-17-1024x576.png" alt="" class="wp-image-22177" srcset="https://tomosta.jp/wp-content/uploads/2022/07/image-17-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/07/image-17-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/07/image-17-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/07/image-17-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/07/image-17.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>では、このボタンをクリックしたらテキストフィールド内の数字が加算されるプログラムを作成してみましょう。</p>



<h4>v-modelで数値を定義しよう</h4>



<p>まずは、テキストフィールドの数字をプログラムで扱えるように、<code>v-model</code>で定義しましょう。まずは、ファイルの上部で次のように準備します。</p>



<pre class="wp-block-code"><code>&lt;script setup&gt;
import { ref } from 'vue'
const number = ref(0)
&lt;/script&gt;

&lt;template&gt;
...</code></pre>



<p>これで、<code>number</code>という値を使えるようになりました。これを、<code>v-model</code>でテキストフィールドに割り当てます。</p>



<pre class="wp-block-code"><code>...
&lt;input type="text" size="30" v-model="number"&gt;...
...</code></pre>



<p>これで、画面上のテキストフィールドに「0」が表示されるようになりました。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/07/image-18-1024x576.png" alt="" class="wp-image-22180" srcset="https://tomosta.jp/wp-content/uploads/2022/07/image-18-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/07/image-18-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/07/image-18-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/07/image-18-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/07/image-18.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>なお、前節でインストールしたVue.js devtoolsがあれば、開発者ツールでも「number」を確認できます。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/07/image-19-1024x576.png" alt="" class="wp-image-22182" srcset="https://tomosta.jp/wp-content/uploads/2022/07/image-19-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/07/image-19-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/07/image-19-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/07/image-19-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/07/image-19.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h4>ボタンをクリックしたときのイベントを定義しよう</h4>



<p>続いて、ボタンをクリックされたときのイベントを定義しましょう。<code>v-on</code>というディレクティブを利用します。</p>



<pre class="wp-block-code"><code>&lt;button v-on=""&gt;+1&lt;/button&gt;</code></pre>



<p>この時に呼び出す処理は、<code>&lt;script&gt;</code>タグ内に次のように宣言します。</p>



<pre class="wp-block-code"><code>const add = () =&gt; {
}</code></pre>



<p>これで、<code>add</code>という関数が定義されました。JavaScriptの「アロー宣言」という方法で宣言しています。</p>



<p>処理の内容は、先ほど定義した<code>number</code>に1を加算するという処理を作ります。</p>



<pre class="wp-block-code"><code>const add = () =&gt; {
  number++
}</code></pre>



<p>「++」というのは、「インクリメント」といって1を加算するという処理です。そしたら、ここで定義したイベントを呼び出しましょう。</p>



<pre class="wp-block-code"><code>&lt;button v-on="add()"&gt;+1&lt;/button&gt;</code></pre>



<p>これで完成です。動作させると、テキストフィールド内の数字が加算されるようになりました。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/07/image-20-1024x576.png" alt="" class="wp-image-22185" srcset="https://tomosta.jp/wp-content/uploads/2022/07/image-20-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/07/image-20-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/07/image-20-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/07/image-20-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/07/image-20.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>クリックする度に加算されていきます。</p>



<h3>v-onの省略</h3>



<p><code>v-on</code>ディレクティブも利用する機会が多いため、前回紹介した<code>v-bind</code>等と同様で省略形が準備されています。<code>@</code>を記述します。</p>



<pre class="wp-block-code"><code>&lt;button @click="add()"&gt;...</code></pre>



<p>こちらの書き方に慣れておくと良いでしょう。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/07/image-21-1024x576.png" alt="" class="wp-image-22188" srcset="https://tomosta.jp/wp-content/uploads/2022/07/image-21-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/07/image-21-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/07/image-21-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/07/image-21-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/07/image-21.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h2>v-forで繰り返し同じ処理を記述しよう</h2>



<figure class="wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio"><div class="wp-block-embed__wrapper">
<iframe loading="lazy" title="Vue 3 繰り返し処理でリストを作ろう - v-for 【Vue 3 Composition API入門】" width="500" height="281" src="https://www.youtube.com/embed/iJj5uy6Ki70?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>
</div></figure>



<p>例えば、ToDoツールなどで「やることリスト」に入っている内容をすべて画面に表示したいといった場合に、同じ作業を繰り返し行ったりします。そのような時に使えるのが<code>v-for</code>という構文です。早速使ってみましょう。</p>



<h3>HTMLを準備しよう</h3>



<p>まずは、ここまでに作成した<code>App.vue</code>の内容はすべて削除し、次のように記述します。</p>



<pre class="wp-block-code"><code>&lt;template&gt;
  &lt;input type="text" size="30"&gt;
  &lt;button&gt;追加&lt;/button&gt;
&lt;/template&gt;</code></pre>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/07/image-22-1024x576.png" alt="" class="wp-image-22206" srcset="https://tomosta.jp/wp-content/uploads/2022/07/image-22-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/07/image-22-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/07/image-22-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/07/image-22-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/07/image-22.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>では、このテキストフィールドに入力した内容を、やることリスト（配列）に記録して、画面に表示していきましょう。</p>



<h3>v-modelを定義しよう</h3>



<p>それでは、テキストフィールドの内容とプログラムをつなげるために、<code>v-model</code>を定義しましょう。ファイルの先頭に、次のように追加します。</p>



<pre class="wp-block-code"><code>&lt;script setup&gt;
import { ref } from 'vue'
const newTodo = ref('')
&lt;/script&gt;
...</code></pre>



<p>それから、テキストフィールドのHTMLには、<code>v-model</code>ディレクティブを追加します。</p>



<pre class="wp-block-code"><code>&lt;input type="text" size="30"<strong> v-model="newTodo"</strong>&gt;</code></pre>



<p>これで、反映するようになりました。テキストフィールドになにか入力してみましょう。デベロッパーツールの「Vue」タブを確認すると、反映されていることが確認できます。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/07/image-23-1024x576.png" alt="" class="wp-image-22212" srcset="https://tomosta.jp/wp-content/uploads/2022/07/image-23-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/07/image-23-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/07/image-23-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/07/image-23-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/07/image-23.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h3>アクションを定義しよう</h3>



<p>続いて、「追加」ボタンをクリックしたらテキストフィールドの内容を配列に格納しましょう。プログラムに次のように追加します。</p>



<pre class="wp-block-code"><code>&lt;script setup&gt;
import { ref } from 'vue'

<strong>const todos = ref(&#91;])</strong>
const newTodo = ref('')

<strong>const addTodo = () =&gt; {
  todos.value.push(newTodo.value)
}
</strong>&lt;/script&gt;</code></pre>



<p>ここでは、<code>todos</code>という配列を準備しました。そして、<code>addTodo</code>というアクションを定義し、その中で、ここで準備した配列の<code>push</code>メソッドを使って、要素を追加しています。追加するないようは、テキストフィールドに入力されている内容です。</p>



<p>そしたら、ボタンをクリックした時のイベントとして、今定義した<code>addTodo</code>を割り当てましょう。</p>



<pre class="wp-block-code"><code>&lt;button <strong>@click="addTodo()"</strong>&gt;追加&lt;/button&gt;</code></pre>



<p>これで、テキストフィールドになにかを入力して「追加」ボタンをクリックすると、配列に追加されることが分かります。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/07/image-24-1024x576.png" alt="" class="wp-image-22220" srcset="https://tomosta.jp/wp-content/uploads/2022/07/image-24-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/07/image-24-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/07/image-24-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/07/image-24-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/07/image-24.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>こうして、次々に配列に値を入れることができます。</p>



<h3>配列の内容を表示しよう</h3>



<p>それでは、ここで準備した配列の内容を表示していきましょう。まずは、HTMLを準備します。</p>



<pre class="wp-block-code"><code>...
&lt;ul&gt;
  &lt;li&gt;あれをやる&lt;/li&gt;
  &lt;li&gt;これをやる&lt;/li&gt;
&lt;/ul&gt;
...</code></pre>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/07/image-25-1024x576.png" alt="" class="wp-image-22224" srcset="https://tomosta.jp/wp-content/uploads/2022/07/image-25-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/07/image-25-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/07/image-25-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/07/image-25-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/07/image-25.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>これを実際に配列の内容に置き換えていきましょう。<code>&lt;li&gt;</code>タグに<code>v-for</code>ディレクティブを追加します。</p>



<pre class="wp-block-code"><code>...
&lt;li<strong> v-for="(todo, i) in todos"</strong>&gt;{{ i }}. {{ todo }}&lt;/li&gt;
...</code></pre>



<p><code>in</code>という構文は、<code>todos</code>という配列の内容を1件取りだして<code>todo</code>に内容を、<code>i</code>にその順番を格納するという構文です。そしてこれは、配列の内容がすべて取り出されるまで繰り返し行われます。</p>



<p>これで、テキストフィールドになにかを入力すると、下にリストが表示されるようになります。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/07/image-26-1024x576.png" alt="" class="wp-image-22229" srcset="https://tomosta.jp/wp-content/uploads/2022/07/image-26-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/07/image-26-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/07/image-26-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/07/image-26-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/07/image-26.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>なお、<code>v-for</code>を使う場合はその行を特定するために<code>key</code>という値を<code>v-bind</code>する必要があります。そしてここには、他と重複しない値を挿入します。そのため、先ほど取りだした<code>i</code>を使いましょう。次のように変更します。</p>



<pre class="wp-block-code"><code>&lt;li<strong> </strong>v-for="(todo, i) in todos"<strong> v-bind:key="i"</strong>&gt;{{ i }}. {{ todo }}&lt;/li&gt;</code></pre>



<h3>入力された内容を削除しよう</h3>



<p>現状、テキストフィールドの内容を追加しても、入力した内容がまだテキストフィールドに残ってしまうため、消さなければなりません。これを、自動で削除されるようにしましょう。<code>addTodo</code>を次のように変更します。</p>



<pre class="wp-block-code"><code>...
const addTodo = () =&gt; {
  todos.value.push(newTodo.value)
<strong>  newTodo.value = ''
</strong>}
...</code></pre>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/07/image-27-1024x576.png" alt="" class="wp-image-22234" srcset="https://tomosta.jp/wp-content/uploads/2022/07/image-27-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/07/image-27-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/07/image-27-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/07/image-27-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/07/image-27.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>なお、確認できたら番号の表示は不要なので、これを削除して次のようにしておきましょう。</p>



<pre class="wp-block-code"><code>&lt;li<strong> </strong>v-for="(todo, i) in todos"<strong> v-bind:key="i"</strong>&gt;{{ todo }}&lt;/li&gt;</code></pre>



<h2>Vue 3で条件によって要素を表示・非表示しよう &#8211; v-if / v-else</h2>



<figure class="wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio"><div class="wp-block-embed__wrapper">
<iframe loading="lazy" title="Vue 3で条件によって要素を表示・非表示しよう - v-if / v-else" width="500" height="281" src="https://www.youtube.com/embed/yVgwplzshug?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>
</div></figure>



<p>ここでは、ToDoの削除機能を実装しましょう。まずは、リストの右端に削除ボタンの代わりに「x」を記述します。</p>



<pre class="wp-block-code"><code>&lt;li v-for="(todo, i) in todos" v-bind:key="i"&gt;{{ todo }} x&lt;/li&gt;</code></pre>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/07/image-28-1024x576.png" alt="" class="wp-image-22252" srcset="https://tomosta.jp/wp-content/uploads/2022/07/image-28-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/07/image-28-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/07/image-28-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/07/image-28-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/07/image-28.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>続いて、イベントを定義していきましょう。まずは<code>removeTodo</code>というメソッドを準備しておきます。</p>



<pre class="wp-block-code"><code>&lt;script setup&gt;
...
const removeTodo = (index) =&gt; {
  todos.value.splice(index, 1)
}
&lt;/script&gt;</code></pre>



<p><code>splice</code>というのは、配列から様子を削除するためのメソッドで、ここでは指定された要素を1件配列から削除することで、ToDoを削除したというわけです。</p>



<p>続いて、削除ボタンにイベントを定義していきます。</p>



<pre class="wp-block-code"><code>&lt;li ...&gt;<strong>&lt;span @click="removeTodo(i)"&gt;x&lt;/span&gt;</strong>&lt;/li&gt;</code></pre>



<p>これで、動作するようになります。ただし、現状では削除ボタンがクリックできるのかが判別しにくいので、スタイルシートを使ってマウスカーソルの形状を変えておきましょう。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/07/image-29-1024x576.png" alt="" class="wp-image-22255" srcset="https://tomosta.jp/wp-content/uploads/2022/07/image-29-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/07/image-29-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/07/image-29-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/07/image-29-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/07/image-29.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<pre class="wp-block-code"><code>&lt;li ...&gt;&lt;span @click="removeTodo(i)"<strong> style="cursor: pointer"</strong>&gt;x&lt;/span&gt;&lt;/li&gt;</code></pre>



<p>これで分かりやすくなりました。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/07/image-30-1024x576.png" alt="" class="wp-image-22257" srcset="https://tomosta.jp/wp-content/uploads/2022/07/image-30-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/07/image-30-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/07/image-30-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/07/image-30-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/07/image-30.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>これで削除が機能するようになります。ToDoを登録して削除すると、実際にリストから消えることが確認できます。</p>



<h3>ToDoがないときは、メッセージを表示しよう</h3>



<p>ToDoが一件もないときは、現状では空の<code>&lt;ul&gt;</code>タグが出力されてしまい、画面が真っ白になってしまいます。これではツールとして分かりにくいので、ここではその旨のメッセージを表示するようにしましょう。</p>



<p>これには、条件に従って要素の表示・非表示を制御できる<code>v-if</code>というディレクティブを利用します。</p>



<p>まずは、<code>&lt;ul&gt;</code>タグに次のように追加しましょう。</p>



<pre class="wp-block-code"><code>&lt;ul v-if="todos.length &gt; 0"&gt;
...
&lt;/ul&gt;</code></pre>



<p>これで、ToDoが1件もない場合は出力しないという指定です。ToDoの配列は<code>.length</code>というプロパティで現在の件数を知ることができます。これが、0よりも大きい場合にだけ出力されるようになります。</p>



<p>これで画面を表示して、HTMLのソースを確認すると、<code>&lt;ul&gt;</code>タグの代わりにVueのコメントタグが挿入されています。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/07/image-31-1024x576.png" alt="" class="wp-image-22265" srcset="https://tomosta.jp/wp-content/uploads/2022/07/image-31-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/07/image-31-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/07/image-31-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/07/image-31-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/07/image-31.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>そして、ToDoを追加すると<code>&lt;ul&gt;</code>タグから含めて出力されるようになります。</p>



<h3>「そうではない場合」を表すv-else</h3>



<p><code>v-if</code>で指定した条件が満たされなかったときに、別の処理をしたい場合は<code>v-else</code>というディレクティブを使うことができます。</p>



<p><code>v-else</code>は<code>v-if</code>を指定した要素と連続で使う必要があります。ここでは、ToDoが1件もない場合に「※ ToDoを追加してください」というメッセージを表示するようにしましょう。次のように追加します。</p>



<pre class="wp-block-code"><code>&lt;ul v-if="todos.length &gt; 0"&gt;
   ...
&lt;/ul&gt;
&lt;p <strong>v-else</strong>&gt;※ ToDoを追加してください&lt;/p&gt;</code></pre>



<p>これにより、ToDoが一件もない場合はメッセージが表示されるようになりました。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/07/image-32-1024x576.png" alt="" class="wp-image-22269" srcset="https://tomosta.jp/wp-content/uploads/2022/07/image-32-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/07/image-32-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/07/image-32-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/07/image-32-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/07/image-32.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>ToDoを入れると、メッセージが消えて代わりにリストが表示されます。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/07/image-33-1024x576.png" alt="" class="wp-image-22270" srcset="https://tomosta.jp/wp-content/uploads/2022/07/image-33-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/07/image-33-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/07/image-33-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/07/image-33-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/07/image-33.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h3>v-ifと似たv-show</h3>



<p>なお、<code>v-if</code>と似た動きをするディレクティブとして<code>v-show</code>というものがあります。こちらは、要素自体は削除せずにCSSの<code>display</code>プロパティで表示を制御するためのものです。特別な理由がなければ、<code>v-if</code>を使っておいた方が良いでしょう。</p>



<p>以下執筆中</p>
]]></content:encoded>
					
					<wfw:commentRss>https://tomosta.jp/2022/06/vue3-begin/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
		<post-id xmlns="com-wordpress:feed-additions:1">22056</post-id>	</item>
	</channel>
</rss>